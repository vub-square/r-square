[
  {
    "objectID": "visualization.html",
    "href": "visualization.html",
    "title": "Visualization with R’s tidyverse",
    "section": "",
    "text": "What-Why-Who\n\n\n\nCurrent draft aims to introduce researchers to visualization in R with the ggplot2 package of the tidyverse ecosystem.\nOur target audience is primarily the research community at VUB / UZ Brussel, those who have some basic experience in R and want to know more.\nWe invite you to help improve this document by sending us feedback: wilfried.cools@vub.be"
  },
  {
    "objectID": "visualization.html#rs-tidyverse-package-ggplot2",
    "href": "visualization.html#rs-tidyverse-package-ggplot2",
    "title": "Visualization with R’s tidyverse",
    "section": "R’s tidyverse package: ggplot2",
    "text": "R’s tidyverse package: ggplot2\n\nFocus on ggplot2 the visualization package in the tidyverse eco-system (Hadley Wickham etal.)\nDifferent visualization packages exist in R.\n\nbase R\ngrid\ntrellis/lattice graphics\nggplot2 (tidyverse) & ggviz\n\nggplot2 the current default\n\nbuild on idea of Grammar of Graphics (Leland Wilkinson)\n\nlargely consistent\nbut still highly flexible\n\ntends to outperform base R for more complex visualizations\nexplicitly links to tidy data\nbut requires extensions for 3D plotting and interactive graphics\nbut does not allow for multiple Y-axes (combination of axes)\n\nggplot2 part of the tidyverse ecosystem (Hadley Wickham etal.), includes:\n\ndplyr for manipulating data frames [main focus]\ntidyr for tidying data [check Data Representation]\nstringr for dealing with texts\nforcats for dealing with factors\n…\n\n\nConvenient cheat sheets at https://rstudio.com/resources/cheatsheets/.\ntidyverse extends base R\n\nit is much more consistent (functions and packages) → ecosystem\nit avoids poor historical choices, sets good defaults\nit explicitly links to tidy data"
  },
  {
    "objectID": "visualization.html#a-quick-illustration-with-ggplot2",
    "href": "visualization.html#a-quick-illustration-with-ggplot2",
    "title": "Visualization with R’s tidyverse",
    "section": "A quick illustration with ggplot2",
    "text": "A quick illustration with ggplot2\n\ntoy dataset\nThe infamous iris data are used\n\nload examplary data available in R packages: data( ) function\nobserve it’s structure with str( ) and first 6 observations head( ) function.\n\nNote: call data( ) without arguments to see all available datasets\n\n\n\na tidyverse look at the data with glimpse( )\n\n\nglimpse(iris)\n\nRows: 150\nColumns: 5\n$ Sepal.Length &lt;dbl&gt; 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…\n$ Sepal.Width  &lt;dbl&gt; 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…\n$ Petal.Length &lt;dbl&gt; 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…\n$ Petal.Width  &lt;dbl&gt; 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…\n$ Species      &lt;fct&gt; setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…\n\n\n\n\n\n\na tidyverse look at the data with slice_head( )\n\n\niris %&gt;% slice_head(n=6)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\n\n\n\ntoy illustration\nLet’s make a scatterplot, boxplot, and histogram\n\n\n\np1 &lt;- ggplot(data=iris,\n    aes(y=Petal.Width,\n        x=Petal.Length,\n        col=Species)) + \n    geom_point()\n\nWith the iris data\nlink dimensions y anx x to Petal columns\nlink color to column Species\n\n\n\n\np1\n\n\n\n\n\n\np2 &lt;- ggplot(data=iris,\n    aes(y=Sepal.Length,\n        x=Species,\n        col=Species)\n        ) + \n    geom_boxplot()\n\nThe x-axis is now Species\nBoxplots show a distribution of values for each Species\n\n\n\n\np2\n\n\n\n\n\n\np3 &lt;- ggplot(data=iris,\n    aes(x=Sepal.Width)) + \n    geom_histogram()\n\nThe x-axis is now the Width\nA histogram shows the full distribution\n\n\n\n\np3\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nggsave( ) saves the last made plot\n\n\n\n\nggsave('plotname.png',width=12,height=6)"
  },
  {
    "objectID": "visualization.html#gg--grammar-of-graphics",
    "href": "visualization.html#gg--grammar-of-graphics",
    "title": "Visualization with R’s tidyverse",
    "section": "-gg- : grammar of graphics",
    "text": "-gg- : grammar of graphics\n\nggplot philosophy: Grammar of Graphics (Leland Wilkinson)\n\nbuild visualization like making a sentence\n\nindependently specify building blocks\ncombine blocks to create any graphical display\n\nexample of layered building blocks with ggplot( ):\n\nggplot(data=iris,\naes(y=Petal.Width,x=Petal.Length,col=Species)) +\ngeom_point()\nggplot( ) creates a ggplot object\n\ndata argument to assign the dataframe (or tibble)\naes( ) function to assign variables from the dataframe to scales (x-axis, y-axis, color)\n\ngeom_point( ) to visualize the ggplot object as a scatterplot\n\nnote: scatterplots require an x and y-axis, linked to variables in a dataframe\n\n\n\nGeneral structure includes data, functions and arguments.\n\nfunctions\n\nggplot( ) function to initialize the ggplot object\ngeom_*( ) function to visualize data through their aesthetics\nstat_*( ) function largely similar to geom but with focus on statistics\nfacet_*( ) function for grouping / conditional visualization\ntheme( ), guides( ), scale_*( ), coord_*( )\n\narguments in ggplot( ), geom_*( ) and stat_*( )\n\ndata argument to specify data (=input)\naes( ) function as argument to specify aesthetic mapping (bridging gap input and output)\n...\n\n\nGrammar of Graphics sparked further developments\n\nother packages following the lead of GG offer additional functionality: ggforce, ggalt, ggpubr, ggraph, tidygraph, GGally, ggcorrplot, ggridges, ...."
  },
  {
    "objectID": "visualization.html#visualization-essentials",
    "href": "visualization.html#visualization-essentials",
    "title": "Visualization with R’s tidyverse",
    "section": "Visualization essentials",
    "text": "Visualization essentials\nFirst part addresses how to make a visualization,\nafterwards it is considered in less detail how to further make refinements.\n\nstep by step example\n\nUse is made of the build-in mtcars and iris datasets\n\n\nThe ggplot object is constructed.\n\ndata is assigned mtcars dataframe\nx and y aesthetic is linked to the variables mpg and disp from the mtcars data\n\nNo visualization is made yet, only the object is created.\n\nan internal representation does exist\n\nready to extend for visualization\naesthetics x and y are given their default values using the mtcars\nincludes a legend and scale for both x and y axis\n\nany geometric object (function) that at least uses an x and y axis can be added as a layer\n\n\n\n\n\nggplot(\n    data=mtcars, \n    aes(y=mpg,x=disp)\n)\n\n\n\n\n\n\n\n\nA layer is added with the + sign, adding a geometric function\nThe geometric function visualizes the gglot object\ngeom_point( ): geometric function without arguments to visualize a scatterplot\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp)\n) + \ngeom_point()\n\n\n\n\n\n\n\n\ngeom_point() requires data, an x and a y-axis\n\nif not specified, inherit from ggplot( )\nif specified, overwrite ggplot( )\n\nexample\n\nx is not specified inside, but inherited from ggplot( )\ny is specified inside, within aes( ) because linked to data (mpg)\ndata is not specified inside, but inherited from ggplot( )\n\n?geom_point for the help file\n\n\n\n\nggplot(data=mtcars, \n    aes(x=disp)\n) + \ngeom_point(aes(y=mpg))\n\n\n\n\n\n\n\n\nNon-essential aesthetics can be included, for example color\nSpecified within the aes( ), values for color are extracted from the variable gear in mtcars\n\nthe numerical (continuous) variable gear is assigned a continuous scale of colors\na legend for continuous variables is by default included\nnote: color should be considered a third dimension\n\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp,\n        color=gear)\n) + \ngeom_point()\n\n\n\n\n\n\n\n\nDifferent types of data are visualized differently\nSpecified within the aes( ), values for color are extracted from the categorical variable gear in mtcars\n\nthe factor (categorical) variable gear is assigned a nominal scale of colors\na legend for categories is by default included for this third dimension\n\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp,\n    color=factor(gear))\n) + geom_point()\n\n\n\n\n\n\n\n\nDefault behavior can be written over\nSpecified within the aes( ) of the geometric function, the default is overwritten\n\nthe plot remains the same\nthe categorical version in geom_point( ) overwrites the numerical in ggplot( )\n\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp,color=gear)) + \n    geom_point(\n        aes(color=factor(gear))\n    )\n\n\n\n\n\naes() is to link a dimension of the visualization to data, alternatively the visualization can be hard-coded\nSpecified outside the aes( ) no relation with data exists\n\ncolor is now assigned a value independent of the actual data\ncolor from the ggplot( ) is overwritten\nremember: aes( ) is essential for linking aesthetics with data\n\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp,color=gear)\n) + \ngeom_point(color='#FF6600')\n\n\n\n\n\n\n\n\nMultiple aesthetics can be specified, in and outside the aes( )\nWith color dependent on gear\n\nalpha (transparency) outside of aes( ) at .3 (30%)\nalpha inside of aes( ) assumes a link to a variable, not a percentage as such\n\nalpha as a percentage (avoid this, it gives unwanted behavior)\nalpha related to variables with values between 0 and 1\n\n\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp)\n) + \ngeom_point(\n    aes(color=factor(gear))\n    ,alpha=.3)\n\n\n\n\n\nWith alpha (transparency) outside of aes( ) at .3 (30%)\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp)\n) + \ngeom_point(\n    aes(color=factor(gear),alpha=.3)\n    )\n\n\n\n\n\nWith alpha inside of aes( ) assumes a link to a variable, not a percentage as such\n- alpha as a percentage (avoid this, it gives unwanted behavior)\n- alpha related to variables with values between 0 and 1\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp)\n) + \ngeom_point(\n    aes(color=factor(gear),\n        alpha=qsec/max(qsec)\n    )\n)\n\n\n\n\n\n\n\n\nMultiple geometric functions can be included\ngeom_point( ) creates the dots,\ngeom_line( ) connects them over the x-axis\nnote: it is possible to assign the ggplot objects and layer them\n\nmyplot &lt;- ggplot(data=mtcars, \n    aes(y=mpg,x=disp)) + \n    geom_line()\nmyplot &lt;- myplot + geom_line()\nmyplot\n\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp)) + \n    geom_line()\n\n\n\n\n\nggplot(data=mtcars, aes(y=mpg,x=disp)) + \n    geom_point() + geom_line()\n\n\n\n\n\n\n\n\ngeom_path( ) simply connects observations\nnote: re-ordering has an effect (arrange( ))\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp)\n) + \ngeom_point() + geom_path()\n\n\n\n\n\nggplot(data=mtcars %&gt;% arrange(drat), \n    aes(y=mpg,x=disp)\n) + \ngeom_point() + geom_path()\n\n\n\n\n\n\n\n\naes( ) in ggplot( ) controls part of the result of geometric functions\nFor example, assigning a categorical variable to color is sufficient to group the lines (path)\nThe color is jointly defined as the grouping\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp,\n    color=factor(gear))\n) + geom_point() + geom_path()\n\n\n\n\n\nA different color, also groups observations differently\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp,\n    color=factor(cyl))\n) + geom_point() + geom_path()\n\n\n\n\n\nSpecifications can be made in ggplot( ) for default behavior, or inside the geom_*( ) for local behavior\n\nnote that the geom_point( ) uses the locally specified color aesthetic\nnote that the geom_line( ) uses the default black (size made smaller than default)\n\nBeware: types (discrete/continuous) should agree when overwriting ggplot(aes( ))\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp)\n) + \ngeom_point(\n    aes(color=factor(gear))\n) + \ngeom_line(linewidth=.3)\n\n\n\n\n\n\n\n\nGeometric functions that add statistics can be included as well\ngeom_smooth( ) offers averaging and standard errors\n\nlocal averages are default (loess lines)\nglobal conditional averages can be requested\n\n\n\n\n\npx &lt;- ggplot(data=mtcars, aes(y=mpg,x=disp,color=factor(gear)))\npx + geom_point() + geom_smooth()\n\n\n\n\n\npx + geom_point() + geom_smooth(method='lm')\n\n\n\n\n\nGrouping through aesthetics works like before\n\nassigning a 1 to color causes all observations to belong to one group\nthe default blue is overwritten to orange\n\n?geom_smooth for more details\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp,\n        color=factor(gear),\n        group=1)\n) + geom_point() + \ngeom_smooth(method='lm',color=\"#FF6600\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nggplot( )\n\nFunction to create a ggplot object, ready for visualization.\n\nconstructor, always required\nprepares appropriate internal representation\ncan include default data\ncan include default aesthetics\n\n\n\naes( )\n\nFunction to link variables (data) to an aesthetic (dimension)\n\nused within ggplot( ) or geom_*( )\nrequires variables (part of data)\ndefines dimensions dependent on variable values\n\nx and y axes: positions on the axes\ncolor: color\n…\n\npossible arguments depent on geom_*( ) if defined\n\nshape: symbols in geom_point( )\nsize: size of bullets in geom_point( )\nlinewidth: width of lines in geom_line( )\n… check the respective help-files\n\ngroup argument used inside aes( ) to identify groups of observations\n\nallows grouping without assigning an aesthetic\nuse the value 1 to combine all observations into one group\n\nautomatically assigns a default legend\n\nrelates to aesthetic\ndepends on variable type (nominal, ordinal, continuous)\n\nnote: aesthetics defined outside of aes( ) are independent of the data\n\n\n\ngeom_*( )\n\nFunction to turn an internal ggplot representation into a visualization\n\ndifferent geoms to create different visualizations\ndifferent geoms use\n\nrequired aesthetics\n\nscatterplots require x and y axis\nhistogram requires x axis\n\noptional aesthetics (eg., color)\n\ngeom-specific arguments overwrite those inherited from ggplot( )\n\ncan include aes( )\ncan include data argument\nuseful to add or change aesthetics"
  },
  {
    "objectID": "visualization.html#visualization-extras",
    "href": "visualization.html#visualization-extras",
    "title": "Visualization with R’s tidyverse",
    "section": "Visualization extras",
    "text": "Visualization extras\nWhile a ggplot object, layered with geom_*( ) functions allows you to visualize data and statistics, there is much more.\n\ngeom and stat layers\n\nBased on a ggplot-object, geometric functions and statistical transformation functions add layers.\n\n\nA geom_*( ) has a default stat argument, a stat_*( ) has a default geom argument.\n\nsame result:\n\nstat_smooth(geom=\"smooth\")\ngeom_smooth(stat=\"smooth\")\n\nsame result:\n\n+ geom_point(stat='summary',fun.y='mean',shape=13,size=16)\n+ stat_summary(geom='point',fun.y='mean',shape=13,size=16)\n\n\nIn most cases stick to geom_*( ), occasionally not possible: eg., ecdf.\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=factor(carb),\n    color=factor(gear))\n) + \ngeom_point() + \nstat_summary(geom='point',fun.y='mean',shape=13,size=16)\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\nggplot(mtcars, \n    aes(mpg)\n) + stat_ecdf(\n    aes(color=factor(cyl)),\n    geom = \"step\"\n)\n\n\n\n\n\n\n\n\nA layer is a function with arguments\n\ndata (see before)\nmapping (aesthetic), defined by the aes( ) (see before)\ngeom (eg., point or smooth)\nstat (eg., identity or smooth)\nposition (eg., identity)\n\nAdjustment positions with position argument\n\nidentity, typically the default\njitter convenient for points and lines (random perturbation)\nstack, fill and dodge convenient for bars (on top or next to)\n\n\n\n\n\npx &lt;- ggplot(data=mtcars,\n    aes(x=disp,\n    fill=factor(gear))\n) \npx + geom_histogram(binwidth=200, \n    position = position_dodge(width=50),\n    alpha=.8)\n\n\n\n\n\npx + geom_histogram(binwidth=200, \n    position = position_stack(),\n    alpha=.8,\n    col='black'\n) + theme(legend.position='none')\n\n\n\n\n\nggplot(data=mtcars,\n    aes(y=mpg,x=drat,color=carb)\n) + geom_jitter()\n\n\n\n\n\n\n\n\nGenerated variables are predefined transformations\n\nexist for some geom_*( ) and stat_*( )\nstart and end with ..\nexample: a histogram uses a ..density..\n\n\n\n\n\npx + geom_histogram(\n    aes(y=..density..),\n    binwidth=200, \n    position = position_stack(),\n    alpha=.8,col='black'\n) + theme(legend.position='none')\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n\n\n\n\n\n\n\nscales_*_*( )\n\n\n\nEach dimension (aesthetic) has a scale, which serves as a legend that helps interpretation of the visualized values.\nScales are referred to with aesthetic and type\n\nstructure: scale__\narguments allow to control titles, breaks, labels, limits, … see the help file\nexamples:\n\nscale_x_continuous to assign continuous scale to x-axis aesthetic\nscale_x_sqrt to square root transform the x-axis aesthetic\nscale_color_brewer to assign brewer colors to the discrete color aesthetic\nscale_color_distiller to assign brewer colors to the continuous color aesthetic\nscale_fill_gradient to assign colors to the fill aesthetic\nscale_fill_manual to manually assign colors to the fill aesthetic\n\nscales can be visualized by the axes (x and y), or by the legend (eg. color)\nnote: guide argument requires either a name or guides() function for additional control\n\nScale types have impact on the visualization (continuous vs. categorical)\n\n\n\n\nggplot(data=mtcars,\n    aes(x=disp,fill=factor(gear))\n) + geom_histogram(\n    aes(y=..density..),\n    binwidth=200, \n    position = position_stack(),\n    alpha=.8,\n    col='black'\n) + theme(legend.position='none') + \nscale_fill_brewer()\n\n\n\n\n\nggplot(data=mtcars,\n    aes(y=mpg,x=cyl,\n    color=drat)\n) + geom_point() + \nscale_color_distiller(palette='Oranges')\n\n\n\n\n\n\n\n\nfacet_*( )\n\n\n\nVisualizations can be split for subgroups, facilitating conditional comparisons.\n\nfacets can be useful to keep plots simple\nby default, the axes are kept constant for comparison, changeable\nfacet_grid( ) uses a grid, facet_wrap( ) keeps filling space\n\nfacet_grid( ) requires a row and/or column specification\n\nseparate rows and columns by ~, use . if none\nusing + allows for multiple row and/or column specification\n\n\n\n\n\nggplot(data=mtcars,\n    aes(y=mpg,x=drat,color=carb)\n) + \ngeom_jitter() + \nfacet_grid(vs~gear)\n\n\n\n\n\nggplot(data=mtcars,\n    aes(y=mpg,x=drat,color=carb)\n) + \ngeom_jitter() + \nfacet_grid(.~vs+cyl)\n\n\n\n\n\n\n\n\ntheme( )\n\n\n\nThemes offer control that is not related to data.\n\nthemes are layers to (re-)specify theme elements\nelements are numerous (?theme):\n\nline, rect, text, title\naxis: axis.title, axis.text.x.top, axis.ticks.x.bottom, …\nlegend: legend.spacing.y, legend.key.width, legend.justification, …\npanel: panel.background, panel.grid.major, panel.ontop, …\nplot: plot.background, plot.caption, plot.tag, plot.margin, …\nstrip: strip.background, strip.text, strip.switch.pad.wrap, …\n\nelements are controlled with a theme function, eg., element_text( )\n\nelement_text( ), element_line( ), element_rect( ), margin( ), …\n\ndefault themes exist, eg., theme_minimal( ), new can be created\nlabs( ) is a simpler way to specify titles and labels\n\n\n\n\n\n(px &lt;- ggplot(mtcars, \n    aes(wt, mpg)\n) + \ngeom_point() + \nlabs(\n    title = \"Fuel economy declines as weight increases\",\n    y='miles per gallon')\n)\n\n\n\n\n\n\n\n\nThe size of the plot title is changed with the element_text( ), the background with the element_rect( )\n\n\n\n\npx + theme(plot.title = element_text(size=rel(1.5)), \n    plot.background=element_rect(fill=\"#FF6600\"))\n\n\n\n\n\nThe inside of the plot is the panel, modifiable too.\n\nmultiple elements can be specified in one theme\nmultiple themes can be specified by layers\n\n\n\n\n\n(py &lt;- px + \n    geom_point(color='#FF6600',size=3) + \n        theme(panel.background = \n            element_rect(fill = \"#003399\", \n        colour = \"#FF6600\")\n) + \ntheme(\n    panel.border = element_rect(\n        linetype = \"dashed\", \n        fill = NA\n    ), \n    panel.grid.major = element_line(\n        colour = \"#FF6600\")\n    )\n)\n\n\n\n\n\npy + theme(\n  panel.grid.major.y = element_line(colour = \"black\"),\n  panel.grid.minor.y = element_blank()\n)\n\n\n\n\n\nOn the outside are the axes and titles, modifiable too.\n\nthe text, ticks and titles are adjusted for color and size\nfunction element_text( ), element_line( ) and unit( ) are used\n\n\n\n\n\n(py &lt;- px + theme(\n    axis.line = element_line(\n        size = 3, \n        colour = \"#FF6600\")\n    ) +\n    theme(axis.text = element_text(\n        colour = \"#003399\", \n        size=12)\n    ) + \n    theme(axis.ticks.y = \n        element_line(size = 5)\n    ) +\n    theme(axis.title.y = \n        element_text(size = rel(1.5))\n    )\n)\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\n\n\npy + theme(\n  axis.ticks.length.y = unit(.25, \"cm\"),\n  axis.ticks.length.x = unit(-.25, \"cm\"),\n  axis.text.x = element_text(\n    margin = margin(t = .3, unit = \"cm\")\n    )\n)\n\n\n\n\n\nScales are represented by legends, modifiable too\n\nlabs can be used to change multiple legend titles\nlegends can be positioned and formatted\n\n\n\n\n\npx &lt;- ggplot(mtcars, \n    aes(wt, mpg)) +\n    geom_point(\n        aes(colour = factor(cyl), \n            shape = factor(vs))\n    ) +\n    labs(\n        x = \"Weight (1000 lbs)\",\n        y = \"Fuel economy (mpg)\",\n        colour = \"Cylinders\",\n        shape = \"Transmission\"\n    )\n\npx + theme(legend.position='none')\n\n\n\n\n\npx + theme(\n    legend.justification = \"right\",\n    legend.position = \"bottom\"\n    )\n\n\n\n\n\npx + theme(\n  legend.position = c(.95, .95),\n  legend.justification = c(\"right\", \"top\"),\n  legend.box.just = \"right\",\n  legend.margin = margin(6, 6, 6, 6)\n)\n\n\n\n\n\nKeys inside legends are modifiable too\n\nlabs can be used to change multiple legend titles\nlegends can be positioned and formatted, for key, text and title\n\n\n\n\n\npx + theme(\n    legend.key = element_rect(\n        fill = \"#bbbbbb\", \n        colour = \"#003399\")\n    ) +\n    theme(legend.text = element_text(\n        size = 14, \n        colour = \"#003399\")\n    ) +\n    theme(legend.title = element_text(\n        face = \"bold\")\n    )\n\n\n\n\n\nThemes also work on facets, at which strips are defined\n\n\n\n\npx &lt;- ggplot(mtcars, \n        aes(wt, mpg)\n    ) + \n    geom_point() + \n    facet_wrap(~ cyl)\n\npx + theme(strip.background = \n    element_rect(colour = \"black\", \n    fill = \"white\")\n)\n\n\n\n\n\npx + theme(strip.text.x = \n    element_text(colour = \"white\", \n    face = \"bold\")\n)\n\n\n\n\n\npx + theme(panel.spacing = \n    unit(1, \"lines\")\n)\n\n\n\n\n\n\n\n\ncoord_*( )\n\n\n\nTypically the default cartesian coordinate system is used, coord_cartesian( ).\nLimits of the axes are best specified within the coord_*( ) function\n\nworks like a zoom\nalternatively, use xlim( ) and ylim( )\n\nbeware that values outside the boundary are treated as missing\n\n\n\n\n\n\npx &lt;- ggplot(data=mtcars,\n    aes(y=mpg,x=gear,\n    color=factor(vs),\n    group=vs)\n)\npx + geom_smooth(method='lm')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\npx + geom_smooth(method='lm') + \n    coord_cartesian(xlim=c(2.5,4.5))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\npx + geom_smooth(method='lm') + \n    xlim(2.5,4.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 5 rows containing non-finite values (`stat_smooth()`).\n\n\n\n\n\n\nWithin the cartesian family alternatives exist\n\ncoord_flip( ) switches x and y-axis\ncoord_fixed( ) sets the ratio for x and y values\n\neg., .1 means 1 unit on x is 10 on y\n\n\nAlternatives exist, eg., coord_polar( ), coord_trans( ), and various map related functions\n\n\n\n\npx + geom_smooth(method='lm') + \n    coord_flip()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\npx + geom_smooth(method='lm') + \n    coord_fixed(.1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\npx + geom_smooth(method='lm') + \n    coord_polar()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nsummary\n\nggplot creates a ggplot object, required for visualization\naes( ) combines aesthetics and link data to scales, and group them\ngeom_*( ) are geom functions that visualize a ggplot object\nstat_*( ) are stat functions that also visualize a ggplot object\nscale_*_*( ) helps fine-tuning visualized dimensions\nfacet_grid( ) or facet_wrap( ) split dimensions over panels (faceting)\ncoords( ) re-specify the coordinate system, and helps zooming in\ntheme( ) re-specifies data independent characteristics"
  },
  {
    "objectID": "visualization.html#examples-to-go-into-detail",
    "href": "visualization.html#examples-to-go-into-detail",
    "title": "Visualization with R’s tidyverse",
    "section": "Examples to go into detail",
    "text": "Examples to go into detail\nThrough various examples the cheat sheet is focused upon. https://rstudio.com/resources/cheatsheets/\n\nprimitives\n\nPrimitives are the basic building blocks.\n\nseveral primitives exist: point( ), path( ), polygon( ), segment( ), ribbon( ), rect( ), text( ), blank( )\nonly geom_point( ) is used very often\ngeom_ribbon( ) can be interesting for showing intervals\ntypically useful for fine-tuning only\n\n\n\nThe polygon( ) is used. The coordinates of the polygon are created in a separate datafile. The same is done with tiles( ). It is possible to create the datafile within the function.\nFirst a blank plot is drawn, then the rest is added.\n\nblank_plot &lt;- ggplot(mtcars,\n    aes(y=mpg,x=cyl)) + \n    geom_blank()\n\npolygon_coordinate_file &lt;- tribble(\n~x,~y,\n6,17,\n6,10,\n5,10,\n8,21)\n\ntile_coordinate_file &lt;- tribble(\n~x,~y,~w,\n5,20,2,\n6,30,5,\n7,15,2)\n\n\n\n\n\n(updated_plot &lt;- blank_plot + \n    geom_polygon(data=polygon_coordinate_file,\n    aes(x=x,y=y),alpha=.3,color=\"#FF6600\"))\n\n\n\n\n\n(updated_plot &lt;- updated_plot + \n    geom_tile(data=tile_coordinate_file,\n        aes(x=x,y=y,width=2),alpha=.3,\n        color=\"#003399\"))\n\n\n\n\n\nupdated_plot + geom_segment(data=\n    data.frame(x=5,y=15,xend=7,yend=20),\n    aes(x=x,y=y,xend=xend,yend=yend),\n    size=5,color=\"#FF6600\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nexercises on primitives\nThe mpg dataset is part of tidyverse’s ggplot !\n\n\nan R solution\ndata(mpg)\n\n\nHave a glimpse at the data, what data-types are included ?\n\n\na tidyverse solution\nglimpse(mpg)\n\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\n\nMake a scatterplot for cty per hwy, and assign it to the object name ‘current’\n\n\na tidyverse solution\ncurrent &lt;- ggplot(data=mpg,aes(y=hwy,x=cty)) + geom_point() \n\n\nDraw 2 rectangles with geom_rect( ),\none with corners 10,15 and 20,25,\none shifted with 5 both dimensions,\nusing 2 additional dataframes (tibbles) to store the coordinates.\n\n# tmp &lt;- data.frame(\n    # c1=c(10,15),\n    # c2=c(15,20),\n    # c3=c(25,30),\n    # c4=c(35,40))\nmy_2_sets_of_coordinates &lt;- tribble(~xi,~yi,~xa,~ya,\n10,15,25,35,\n15,20,30,40\n)\n\nPlot the coordinates on top of the scatterplot\nNote: the argument inherit.aes=FALSE avoids inheriting aesthetics\n\n\na tidyverse solution\ncurrent + geom_rect(data=my_2_sets_of_coordinates,\n    aes(xmin=xi,ymin=yi,xmax=xa,ymax=ya),\n    inherit.aes=FALSE,alpha=.3)\n\n\n\n\n\nAdd a different color to each separately, use ‘#FF6600’ and ‘#003399’\n\n\na tidyverse solution\ncurrent + \n    geom_rect(data=my_2_sets_of_coordinates[1,],\n        aes(xmin=xi,ymin=yi,xmax=xa,ymax=ya),\n        inherit.aes=FALSE,alpha=.3,\n        fill=\"#003399\") + \n    geom_rect(data=my_2_sets_of_coordinates[2,],\n        aes(xmin=xi,ymin=yi,xmax=xa,ymax=ya),\n        inherit.aes=FALSE,alpha=.3,\n        fill=\"#FF6600\")\n\n\n\n\n\n\n\n\none-variable\n\n\nVarious visualizations address one particular variable, mostly continuous but possibly also discrete.\nA continuous variables is typically ‘binned’ into groups within which frequencies are obtained.\nNote the frequency polygon, and the histogram.\n\n\n\n\nggplot(data=mtcars,aes(mpg)) + \ngeom_freqpoly(binwidth=2.5)\n\n\n\n\n\nggplot(data=mtcars,aes(mpg)) + \ngeom_histogram(binwidth=2.5)\n\n\n\n\n\nWhen using the geom_area( ) such binning must be explicitly included as stat argument.\n\n\n\n\nggplot(data=mtcars,aes(mpg)) + \n    geom_area(stat='bin',binwidth=2.5)\n\n\n\n\n\nContinuous variables can also be shown continuously.\nDifferent types of densities are shown.\n\n\n\n\nggplot(data=mtcars,aes(mpg)) + geom_density() + \n    geom_density(kernel='triangular',color=\"#003399\") + geom_density(kernel='optcosine',color=\"#FF6600\")\n\n\n\n\n\nThe geom_qq( ) requires a sample argument instead of x, as positions are determined by their size.\n\n\n\n\nggplot(data=mtcars,\n    aes(sample=mpg)) + \n    geom_qq()\n\n\n\n\n\nThe bar-plot with geom_bar( ) is similar to the histogram but shows the actual values instead of a count per bin.\n\n\n\n\nggplot(data=mtcars,\n    aes(factor(cyl))) + \n    geom_bar(fill='#FF6600',color='#003399')\n\n\n\n\n\n\n\nexercises on one variable visualizations\nMake use of the mpg dataset again\nMake a histogram for the continuously scaled displ variable\n\n\nan R solution\nggplot(data=mpg,aes(x=displ)) + \n    geom_histogram()\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nAdjust the binwidth to .5 Have a glimpse at the data, what data-types are included ?\n\n\na tidyverse solution\nggplot(data=mpg,aes(x=displ)) + \n    geom_histogram(binwidth=.5)\n\n\n\n\n\nAdd a frequency polynomial on top (freqpoly)\n\n\na tidyverse solution\nggplot(data=mpg,aes(x=displ)) + \n    geom_histogram(binwidth=.5) + \n    geom_freqpoly()\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nNotice what happens if the same binwidth is used for the frequency polynomial.\n\n\na tidyverse solution\nggplot(data=mpg,aes(x=displ)) + \n    geom_histogram(binwidth=.5) + \n    geom_freqpoly(binwidth=.5)\n\n\n\n\n\nMake a barplot for the discretely scaled class variable\n\n\na tidyverse solution\nggplot(data=mpg,aes(x=class)) + \n    geom_bar()\n\n\n\n\n\nGroup the data by filling in colors dependent on the drv variable\n\n\na tidyverse solution\nggplot(data=mpg,aes(x=class)) + \n    geom_bar(aes(fill=drv))\n\n\n\n\n\nTurn the bars next to one-another\nReduce their width to .5 to increase space between bars\n\n\na tidyverse solution\nggplot(data=mpg,aes(x=class)) + \n    geom_bar(aes(fill=drv),\n    position='dodge',width=.5)\n\n\n\n\n\n\n\n\ntwo-variables\n\n\nVarious visualizations address the relation between two variables, whether discrete and/or continuous.\nEspecially for categorical data data could obscure other data. Deal with this using the position argument or with the geom_jitter( ). Avoid combining both geom_point( ) and geom_jitter( ) as it would draw points each time.\n\n\n\n\nggplot(data=mtcars,aes(cyl,gear)) + \ngeom_point()\n\n\n\n\n\nggplot(data=mtcars,aes(cyl,gear)) + \ngeom_jitter(width=.2,height=.2)\n\n\n\n\n\nggplot(data=mtcars,aes(cyl,gear)) + \ngeom_point(color='#FF6600') + \ngeom_jitter(width=.2,height=.2)\n\n\n\n\n\nThe smooth function has been shown above, changing the confidence band into areas that capture that middle 50% (quantiles .25 and .75), and including a rug at the axes to capture the one dimensional distribution.\nInstead of bullet indicators, the row names or any other set of labels can be used using the label argument (within the aes( ) when related to data). A bit of jitter is added to avoid overlap.\n\n\n\n\nggplot(data=mtcars, \n    aes(y=mpg,x=disp,color=factor(gear))) + \n    geom_point() + \n    geom_smooth(method='lm',se=FALSE) + \n    geom_rug() + \n    geom_quantile(quantiles=c(.25,.75),linetype=2)\n\n`geom_smooth()` using formula = 'y ~ x'\nSmoothing formula not specified. Using: y ~ x\nSmoothing formula not specified. Using: y ~ x\nSmoothing formula not specified. Using: y ~ x\n\n\n\n\n\n\nggplot(mtcars, aes(wt, mpg)) + \ngeom_text(\n    aes(label=(rownames(mtcars))),\n    size=2,\n    position=position_jitter(width = .2,height=3, seed=256)\n)\n\n\n\n\n\nggplot(data=mtcars,aes(cyl,gear)) + \ngeom_point(color='#FF6600') + \ngeom_jitter(width=.2,height=.2)\n\n\n\n\n\nLike with one dimensional discrete data, bars can be obtained with geom_col( ), or with geom_bar(stat='identity'). Use of ‘identity’ causes the height to depend on the numbers in the data. It sums these numbers if not unique, be careful.\nA count( ) extracts the frequency of the specified grouping, this is the one visualized.\n\n\n\n\n(freq_by_group &lt;- mtcars %&gt;% group_by(gear,vs) %&gt;% count())\n\n# A tibble: 6 × 3\n# Groups:   gear, vs [6]\n   gear    vs     n\n  &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1     3     0    12\n2     3     1     3\n3     4     0     2\n4     4     1    10\n5     5     0     4\n6     5     1     1\n\nggplot(freq_by_group, \n    aes(fill=factor(vs), y=n, x=gear)) + \ngeom_bar(position=\"stack\", stat=\"identity\")\n\n\n\n\n\nggplot(freq_by_group, \n    aes(fill=factor(vs), y=n, x=gear)) + \ngeom_col(position=\"dodge\")\n\n\n\n\n\nggplot(mtcars, \n    aes(fill=factor(vs), y=mpg, x=gear)) + \ngeom_col(position=\"dodge\") + \nlabs(y='sums all mpg values')\n\n\n\n\n\nAn interesting visualization for continuous data, possibly for different groups, is the boxplot.\n\n\n\n\nggplot(data=mtcars,\n    aes(y=mpg,x=factor(cyl))) + \ngeom_boxplot()\n\n\n\n\n\nggplot(data=mtcars,\n    aes(y=mpg,x=factor(cyl))) + \n    geom_boxplot(width=.25,alpha=.2,\n        aes(fill=factor(cyl))\n    ) + \n    geom_jitter(width=.05)\n\n\n\n\n\n\n\nexercises on two variable visualizations\nUse the mpg dataset again.\nMake a scatterplot histogram for the continuously scaled hwy on cty, and color by cyl\n\n\nan R solution\nggplot(data=mpg,aes(y=hwy,x=cty,color=cyl)) + \n    geom_point() \n\n\n\n\n\nJitter the data, so it shows if data points obscure one-another\nMake sure that cyl is categorical\n\n\na tidyverse solution\nggplot(data=mpg,\n    aes(y=hwy,x=cty,color=factor(cyl))) + \ngeom_jitter() + \ngeom_smooth(method='lm')\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nAdd a conditional average with geom_smooth( ), use the lm method\n\n\na tidyverse solution\nggplot(data=mpg,\n    aes(y=hwy,x=cty,color=class)) + \ngeom_jitter(aes(shape=factor(cyl))) + \ngeom_smooth(method='lm')\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nAdd a shape dependent on class, notice the restriction on the number of shapes\n\n\na tidyverse solution\nggplot(data=mpg,aes(y=hwy,x=cty)) + \n    geom_jitter(\n        aes(shape=factor(cyl))\n    ) + \n    geom_smooth(method='lm',aes(color=class))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nSwitch the color and shapes around (color can have more than 6 if it is really necessary)\n\n\na tidyverse solution\nggplot(data=mpg,aes(y=hwy,x=cty)) + \n    geom_jitter(aes(shape=factor(cyl))) + geom_smooth(method='lm',aes(color=class))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nMake sure the symbols do not differ by color (all black), only shape, but keep the regression lines\n\n\na tidyverse solution\nggplot(data=mpg,aes(y=hwy,x=cty)) + \n    geom_jitter(aes(shape=factor(cyl))) + geom_smooth(method='lm',aes(color=class))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nShow boxplots for the hwy for each cyl\n\n\na tidyverse solution\nggplot(data=mpg,\n    aes(y=hwy,x=factor(cyl))\n) + \ngeom_boxplot()\n\n\n\n\n\nAdd the actual data points and make sure they do not obscure each other\n\n\na tidyverse solution\nggplot(data=mpg,\n    aes(y=hwy,x=factor(cyl))\n) + \ngeom_boxplot() + \ngeom_jitter()\n\n\n\n\n\nGive a color to the observations dependent on class\n\n\na tidyverse solution\nggplot(data=mpg,\n    aes(y=hwy,x=factor(cyl))\n) + \ngeom_boxplot() + \ngeom_jitter(aes(color=class))\n\n\n\n\n\nMake a bar chart that add all hwy values in each class group\n\n\na tidyverse solution\nggplot(data=mpg,\n    aes(y=hwy,x=factor(class))\n) + \ngeom_col()\n\n\n\n\n\nUse a coloring of the bars to signal the relative contribution of all cyl categories\n\n\na tidyverse solution\nggplot(data=mpg,\n    aes(y=hwy,x=factor(class),\n    fill=factor(cyl))\n) + \ngeom_col()\n\n\n\n\n\nFlip the coordinates x and y axis\n\n\na tidyverse solution\nggplot(data=mpg,\n    aes(y=hwy,x=factor(class),\n    fill=factor(cyl))\n) + \ngeom_col() + \ncoord_flip()\n\n\n\n\n\n\n\n\nintervals\n\n\nSpecialized functions facilitate visualization of errors / confidence intervals.\nWhen standard errors are obtained, along with fitted values, they are easily shown. Other intervals can be visualized this way too.\n\n\n\n\n(tmp &lt;- tribble(\n~set,~fit,~se,\n1,3,.2,\n2,2,.3,\n3,2,.4))\n\n# A tibble: 3 × 3\n    set   fit    se\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     3   0.2\n2     2     2   0.3\n3     3     2   0.4\n\n(px &lt;- ggplot(data=tmp,\n    aes(y=fit,x=set)))\n\n\n\n\n\npx + geom_errorbar(\n    aes(ymax=fit+2*se,ymin=fit-2*se)\n)\n\n\n\n\n\npx + geom_errorbarh(\n    aes(xmax=fit+2*se,xmin=fit-2*se)\n)\n\n\n\n\n\npx + geom_crossbar(\n    aes(ymax=fit+2*se,ymin=fit-2*se)\n)\n\n\n\n\n\npx + geom_pointrange(\n    aes(ymax=fit+2*se,ymin=fit-2*se)\n)\n\n\n\n\n\n\n\n\nthird variable implied\n\n\nFrequencies and densities can be obtained for two variables.\nWith geom_bin2d( ) the frequency of combinations is obtained, in this case for the factors cyl and gear. Because using bins also continuous variables can be used. The geom_density2d( ) is also used with continuous variables, with contours depending on for example the gear levels.\n\n\n\n\nggplot(data=mtcars,\n    aes(y=factor(cyl),x=factor(gear))\n) + \ngeom_bin2d()\n\n\n\n\n\nggplot(data=mtcars,\n    aes(y=mpg,x=carb)\n) + geom_density2d(\n    aes(colour = factor(gear))\n)\n\n\n\n\n\n\n\n\nthree variables\n\n\nWhile typically a third variable is included using aesthetics, it can be done with the z dimension as well.\nWhen a third dimension is linked to a combination of conditions, they are easily shown. For the example meaningless data are simulated, 100 observations of which the first 6 are shown.\nA heatmap is the most obvious use, to show for example correlations between many variables with colors instead of values. A small example is used instead. Notice that the argument for tile is a fill while for contour is is simply z.\n\n\n\n\ntmp &lt;- expand.grid(set1=1:10,set2=1:10); \nset.seed(123); \ntmp$score &lt;- runif(100,0,1)\nhead(tmp)\n\n  set1 set2     score\n1    1    1 0.2875775\n2    2    1 0.7883051\n3    3    1 0.4089769\n4    4    1 0.8830174\n5    5    1 0.9404673\n6    6    1 0.0455565\n\n\n\nggplot(data=tmp,\n    aes(y=set2,x=set1)\n) + \ngeom_tile(aes(fill=score))\n\n\n\n\n\nggplot(data=tmp,\n    aes(y=set2,x=set1)\n) + \ngeom_contour(aes(z=score))"
  },
  {
    "objectID": "visualization.html#last-remarks",
    "href": "visualization.html#last-remarks",
    "title": "Visualization with R’s tidyverse",
    "section": "Last remarks",
    "text": "Last remarks\nCurrent page provides a primer on visualization, which is a key tool for understanding data and statistics required within the process of data analyses.\nGet ahead at https://ggplot2-book.org/\nIt is strongly advised to play with the techniques discussed above to get some proficiency in using it, as it would add significantly to the flexibility of whatever you want to further do with your data.\n\nOther tidyverse package exist, and within the same framework many more are being developed. The consistency within the tidyverse ecosystem should give you a push though, to study the other packages yourself when of interest.\nBase R still is a proper alternative to the tidyverse ecosystem, so be aware that others may do things differently."
  },
  {
    "objectID": "rPrimer.html",
    "href": "rPrimer.html",
    "title": "R primer",
    "section": "",
    "text": "What-Why-Who\n\n\n\nCurrent draft aims to very concisely introduce researchers to R.\nOur target audience is primarily the research community at VUB / UZ Brussel, those who have some basic experience in R and could use a refresher.\nWe invite you to help improve this document by sending us feedback: wilfried.cools@vub.be\nCompiled Oct 11, 2023 (R 4.3.1)"
  },
  {
    "objectID": "rPrimer.html#exemplary-analysis",
    "href": "rPrimer.html#exemplary-analysis",
    "title": "R primer",
    "section": "Exemplary Analysis",
    "text": "Exemplary Analysis\nBefore going into any detail, a simple analysis will show you where you are heading towards.\n\n\nLet’s use a dataset that is included into R, the mtcars.\nDetermine all available data with data( ).\nThe first 6 lines of the dataset is shown to give an idea about the variables.\n\n\n\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\n\n\n\n\nA regression analysis of mpg (dependent variable) on am (independent variable) is performed with lm( ) function (linear model).\nam is treated as a factor with two levels “0” and “1” (see later) or numeric with values 0 and 1, which makes no difference with only two values.\nThe result is assigned to the R object myResult.\n\n\n\n\nmyResult &lt;- lm(mpg~am,data=mtcars)\n\n\n\n\n\nTo show the result, request the R object.\nNote: an assignment of regression output to an R object (referred to with its name) does not show by itself.\nThere is a lot more inside the object that can be extracted.\nTo request a summary, use the summary() function on the R object.\n\n\n\n\nsummary(myResult)\n\n\nCall:\nlm(formula = mpg ~ am, data = mtcars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-9.3923 -3.0923 -0.2974  3.2439  9.5077 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   17.147      1.125  15.247 1.13e-15 ***\nam             7.245      1.764   4.106 0.000285 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.902 on 30 degrees of freedom\nMultiple R-squared:  0.3598,    Adjusted R-squared:  0.3385 \nF-statistic: 16.86 on 1 and 30 DF,  p-value: 0.000285\n\n\n\n\n\n\nFor a regression output type of object, the plot( ) function offers specific visualizations.\nA possible way to request one of them is by using their index.\nThe qqplot (2) and the influence measured by Cook’s distance (4) are shown.\n\n\n\n\nplot(myResult,2)\n\n\n\nplot(myResult,4)\n\n\n\n\n\n\n\n\nFor a regression output type of object, much more information is available, try str(myResult) and you’ll see.\nExtract, for example, the R-squared of explained variance:\n\n\n\n\nsummary(myResult)$r.squared\n\n[1] 0.3597989\n\n\n\n\n\n\nIn this case, with a continuous dependent variable and a categorical independent, an equivalent analysis would be ANOVA which can be performed with the aov() function in which the am is automatically treated as a factor.\nLet’s perform the anova and extract it’s summary.\nThe t-value when squared gives an F-value, so you can verify, both the ANOVA and regression offer exactly the same evidence for group differences in mpg for am equal to 0 or 1.\n\n\n\n\nsummary(aov(mpg~am,data=mtcars))\n\n            Df Sum Sq Mean Sq F value   Pr(&gt;F)    \nam           1  405.2   405.2   16.86 0.000285 ***\nResiduals   30  720.9    24.0                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "rPrimer.html#using-r",
    "href": "rPrimer.html#using-r",
    "title": "R primer",
    "section": "Using R",
    "text": "Using R\nR commands can be entered in the R console for its interpretation (=running R commands).\n\nEnter commands after the prompt, typically &gt; to start and + to proceed.\n\nPush enter to make R interpret your command. ESC to exit a command.\nPush Arrow Up (Down) to request previous (next) command. The function history() shows earlier commands.\n\nPush Tab to complete the name of an R object if uniquely identifiable. Tab again to list possible names of R object if not uniquely identifiable.\n\nR scripts combine commands for current and future use, they can be flushed to the R console (=creating a program with R commands).\n\nfrom the script window in RGui (basic, find Rgui.exe in the folder with binary files, maybe R/R-x.x.x/bin/x64 or R/R-x.x.x/bin/i386)\nfrom source code editors, eg., Notepad++ (general purpose)\nintegrated development environments: eg., RStudio (standard / recommended)"
  },
  {
    "objectID": "rPrimer.html#r-workspace",
    "href": "rPrimer.html#r-workspace",
    "title": "R primer",
    "section": "R workspace",
    "text": "R workspace\nAn R workspace is a working environment for a user to interact with, that includes all R objects a user makes or imports. An R workspace has the extension .RData (or .rdta).\n\nAn R workspace is linked to a directory on your system, the working directory, for its input and output. This is the folder in which your .RData is stored.\n\n\nRetrieve the working directory:\n\n\n\n\ngetwd()\n\n\n\n\n\nCheck what is in that working directory already:\n\n\n\n\ndir()\n\n\n\n\n\nSet a working directory by its directory path, use forward slashes (or double backward \\\\ because \\ is an escape character):\n\n\n\n\nsetwd('C:/Users/.../Documents/')\n\n\n\n\nA workspace can import files from (the working) directory:\n\nR workspace with its R objects using load()\n\neg., load(mydta.RData)\n\nR code with variables and/or functions to execute using source()\n\neg., source('myprog.r')\n\nR functions from installed R packages using library() or require()\n\neg., library(tidyverse)\n\ndata from text or other files (see below)\n\neg., read_table(file='myfile.txt',sep='\\t')\n\n\n\nAn R workspace offers over 1000 functions and operators combined into the package base.\nAdditional dedicated functions are included by loading in appropriate additional packages when necessary (see library( )).\n\n\nTo include all functions related to the tidyverse package, at least once install the packages of interest, and occasionally update them:\n\n\n\n\ninstall.packages('tidyverse')\n\n\n\n\n\nEvery time a workspace is opened, all relevant packages should be included\n\n\n\n\nlibrary(tidyverse)\n\n\n\n\n\nCheck which packages are loaded:\n\n\n\n\nsearch()\n\n [1] \".GlobalEnv\"         \"package:kableExtra\" \"package:gtExtras\"  \n [4] \"package:gt\"         \"package:lubridate\"  \"package:forcats\"   \n [7] \"package:stringr\"    \"package:dplyr\"      \"package:purrr\"     \n[10] \"package:readr\"      \"package:tidyr\"      \"package:tibble\"    \n[13] \"package:ggplot2\"    \"package:tidyverse\"  \"package:stats\"     \n[16] \"package:graphics\"   \"package:grDevices\"  \"package:utils\"     \n[19] \"package:datasets\"   \"package:methods\"    \"Autoloads\"         \n[22] \"package:base\"      \n\n\n\n\n\n\nCheck where packages are stored:\n\n\n\n\n.libPaths()\n\n[1] \"C:/Users/Wilfried/Use/R\"                          \n[2] \"C:/Users/Wilfried/AppData/Local/R/win-library/4.3\"\n[3] \"C:/Program Files/R/R-4.3.1/library\"               \n\n\n\n\n\n\nCheck all installed packages\nby default includes all locations given by .libPaths()\n\n\n\n\nlibrary()\n\n\n\nTo get help on how to use functions, eg., read.delim( ),\ncall them with ?read_delim.\nTo get help on how to use packages, eg., tidyr,\ncall help(package='tidyr')."
  },
  {
    "objectID": "rPrimer.html#create-r-objects",
    "href": "rPrimer.html#create-r-objects",
    "title": "R primer",
    "section": "Create R objects",
    "text": "Create R objects\nThe &lt;- assignment operator assigns values to R objects through their name (= works equivalently, but note: == is the equal sign).\nEquivalently, the assign( ) function can be used\neg., assign(‘myNewObject’,c(1:10))\n\n\nNote that the path is specified by a string (class=character).\n\n\n\n\nmyDirPath &lt;- 'C:/Users/.../Documents/'\nclass(myDirPath)\n\n[1] \"character\"\n\n\n\n\n\n\nOnce established, the R object can be used by any function able to deal with that type of object, in this case a string.\n\n\n\n\nsetwd(myDirPath)\n\n\n\n\n\nAn R object can be removed, which is especially of interest when it uses a lot of memory.\n\n\n\n\nrm(myDirPath)\n\n\n\n\n\nA few R objects are created to exemplify.\nTo show the result of an assignment is should either be called explicitly, or the assignment should be made in brackets.\n\n\n\n\na &lt;- c('a vector of 2',1)\na\n\n[1] \"a vector of 2\" \"1\"            \n\nclass(a)\n\n[1] \"character\"\n\n(b &lt;- c(2,NA,3))\n\n[1]  2 NA  3\n\nclass(b)    # a numeric vector\n\n[1] \"numeric\"\n\n(mx &lt;- matrix(1:12,nrow=3)) # a matrix\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\nclass(mx)   # matrix of numbers\n\n[1] \"matrix\" \"array\" \n\n(mydataframe &lt;- data.frame(\n        y=runif(10),\n        x=rep(c(1,2),\n        each=5))\n    )\n\n            y x\n1  0.06478043 1\n2  0.18264613 1\n3  0.65014439 1\n4  0.53667521 1\n5  0.69810151 1\n6  0.59612015 2\n7  0.52916412 2\n8  0.63782574 2\n9  0.32280278 2\n10 0.32731049 2\n\nclass(mydataframe)\n\n[1] \"data.frame\""
  },
  {
    "objectID": "rPrimer.html#dataframes-r-data-object-for-analysis",
    "href": "rPrimer.html#dataframes-r-data-object-for-analysis",
    "title": "R primer",
    "section": "Dataframes: R data object for analysis",
    "text": "Dataframes: R data object for analysis\nTypically data are stored as a dataframe in R, which is a list of equally sized vectors. A vector is a combination of elements of a particular type. Note: different types can not co-exist in a vector.\nDataframes are similar to matrices, but more flexible because each vector can be of a different type. Roughly speaking, the first column could be characters, the second numbers, the third booleans, … all of the same size.\n\n\nAn exemplary dataframe is created from vectors of size 4:\n\n\n\n\nmydataframe &lt;- data.frame(\n    a=1:4,\n    b=c(T,FALSE,T,TRUE),\n    c=c('a','b','a','a'),\n    d=c(1.2,NA,1.5,.2),\n    e=c(1.2,T,.3,NA),\n    f=c(1.2,'&gt;5',NA,.2),\n    g=c(T,FALSE,'true','?')\n)\n\n\n\n\n\nNotice that the dataframe consists of column a to g.\n\n\n\n\nmydataframe\n\n  a     b c   d   e    f     g\n1 1  TRUE a 1.2 1.2  1.2  TRUE\n2 2 FALSE b  NA 1.0   &gt;5 FALSE\n3 3  TRUE a 1.5 0.3 &lt;NA&gt;  true\n4 4  TRUE a 0.2  NA  0.2     ?\n\nstr(mydataframe)\n\n'data.frame':   4 obs. of  7 variables:\n $ a: int  1 2 3 4\n $ b: logi  TRUE FALSE TRUE TRUE\n $ c: chr  \"a\" \"b\" \"a\" \"a\"\n $ d: num  1.2 NA 1.5 0.2\n $ e: num  1.2 1 0.3 NA\n $ f: chr  \"1.2\" \"&gt;5\" NA \"0.2\"\n $ g: chr  \"TRUE\" \"FALSE\" \"true\" \"?\"\n\n\n\n\n\n\nNotice that the dataframe consists of column a to g.\nThe different vectors within the dataframe:\n\na: integer (int)\nb: logical (with TRUE or FALSE), T and F are converted into booleans TRUE and FALSE\nc: factor, character type labels are converted into a factor with two levels\nd: numeric, double values with NA for a missing value which does not change the type\ne: numeric, the T is interpreted as TRUE which is a boolean which is converted into a 1\nf: factor, the &gt;5 can not be interpreted as numeric/boolean, all values are turned into characters and converted to factors\ng: factor, the ? and true can not be interpreted as numeric/boolean, all values are turned into characters and converted to factors\n\n\n\n\n\nmydataframe\n\n  a     b c   d   e    f     g\n1 1  TRUE a 1.2 1.2  1.2  TRUE\n2 2 FALSE b  NA 1.0   &gt;5 FALSE\n3 3  TRUE a 1.5 0.3 &lt;NA&gt;  true\n4 4  TRUE a 0.2  NA  0.2     ?\n\nstr(mydataframe)\n\n'data.frame':   4 obs. of  7 variables:\n $ a: int  1 2 3 4\n $ b: logi  TRUE FALSE TRUE TRUE\n $ c: chr  \"a\" \"b\" \"a\" \"a\"\n $ d: num  1.2 NA 1.5 0.2\n $ e: num  1.2 1 0.3 NA\n $ f: chr  \"1.2\" \"&gt;5\" NA \"0.2\"\n $ g: chr  \"TRUE\" \"FALSE\" \"true\" \"?\"\n\n\n\n\n\n\nTo avoid characters converted into factors, add the stringsAsFactors=FALSE argument.\nNotice, characters are quoted.\n\n\n\n\nmydataframe2 &lt;- data.frame(\n    c=c('a','b','a','a'),\n    f=c(1.2,'&gt;5',NA,.2),\n    g=c(T,FALSE,'true','?'), \n    stringsAsFactors=FALSE)\nstr(mydataframe2)\n\n'data.frame':   4 obs. of  3 variables:\n $ c: chr  \"a\" \"b\" \"a\" \"a\"\n $ f: chr  \"1.2\" \"&gt;5\" NA \"0.2\"\n $ g: chr  \"TRUE\" \"FALSE\" \"true\" \"?\"\n\n\n\n\n\n\nExtract the vector from a dataframe, using the $ operator and a name, the list selector [[ ]] with either a name or a number for the position.\nA vector named ‘a’ is selected using the $, or as an element within the list, or the first element, or the first column treating it as a matrix, of the column named ‘a’ treating it as a matrix.\n\n\n\n\nmydataframe$a\n\n[1] 1 2 3 4\n\nmydataframe[['a']]\n\n[1] 1 2 3 4\n\nmydataframe[[1]]    \n\n[1] 1 2 3 4\n\nmydataframe[,1] \n\n[1] 1 2 3 4\n\nmydataframe[,'a']\n\n[1] 1 2 3 4\n\n\n\n\n\n\nThe class is now of type vector, in this case numeric:\n\n\n\n\nclass(mydataframe$a)\n\n[1] \"integer\"\n\n\n\n\n\n\nExtract a row from a dataframe, using either the row name or a number of the position.\nThe row names can be consulted.\n\n\n\n\nrow.names(mydataframe)\n\n[1] \"1\" \"2\" \"3\" \"4\"\n\n\n\n\n\n\nThese row names can also be altered.\n\n\n\n\nrow.names(mydataframe) &lt;- \n    c('row.1',\n    'row.2',\n    'row.3',\n    'row.4')\n\n\n\n\n\nTo extract a row it is necessary to treat it like a matrix, with a position or name in front of the comma (after the comma is for columns).\nTreating a dataframe as if it were a matrix, selecting row 4, or selecting it by row names as given.\n\n\n\n\nmydataframe[4,]\n\n      a    b c   d  e   f g\nrow.4 4 TRUE a 0.2 NA 0.2 ?\n\nmydataframe[c('row.1','row.4'),] \n\n      a    b c   d   e   f    g\nrow.1 1 TRUE a 1.2 1.2 1.2 TRUE\nrow.4 4 TRUE a 0.2  NA 0.2    ?"
  },
  {
    "objectID": "rPrimer.html#read-dataframes",
    "href": "rPrimer.html#read-dataframes",
    "title": "R primer",
    "section": "Read dataframes",
    "text": "Read dataframes\nVarious ways exist to read data into R.\n\n\nIn base R, read in a tab-delimited text file with header:\n\n\n\n\ndta &lt;- read.table(\n    '_dta/RealData_clean.txt',\n    sep='\\t',\n    header=T)\nclass(dta)\n\n[1] \"data.frame\"\n\n\n\n\n\n\nInstead of tabs as separator (sep=‘), other symbols can be used, like comma’s (sep=’,’). For other options consult the help file:\n\n\n\n\n?read.table\n\n\n\n\n\nPackages with dedicated read-and-write functions, like the foreign package, provide more functions for reading in data from SAS, Stata, SPSS, and more.\nLet’s load in functions, consult the help file and read an SPSS file.\n\n\n\n\nlibrary(foreign)\nhelp(package='foreign')\nread.spss(\"RealData_clean.sav\",\n    to.data.frame=T)\n\n\n\n\n\nThe tidyverse ecosystem includes the readr package, for reading in data. Check out the arguments with ?read_delim.\nDifferent types of files can be read in with different delimiters.\nNote that also a copy-paste is possible, an example in readr is included\n\n\n\n\n# library(readr) # or tidyverse\nmydtaCsv &lt;- read_delim('_dta/RealData_clean.csv',\n    delim=';')\nmydtaTxt &lt;- read_delim('_dta/RealData_clean.txt',\n    delim='\\t')\nmydtaClp &lt;- read_delim(\n    clipboard(),\n    delim='\\t')\n\n\n\n\n\nExcel is notoriously error prone but popular. A package dedicated to reading in data from Excel is readxl.\n\n\n\n\nlibrary(readxl)\n# read xlsx file and assign it to mydtaXls object\nmydtaXls &lt;- read_excel(\n    \"_dta/RealData_clean.xlsx\",\n    sheet=\"datafile\")\nclass(mydtaXls) # consult class of mydtaXls object\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\nFor each function, many arguments are possible.\nMore complex and versatile tools exist, also for XML, relational databases, unstructured data, …"
  },
  {
    "objectID": "rPrimer.html#data-types-and-structures-in-r",
    "href": "rPrimer.html#data-types-and-structures-in-r",
    "title": "R primer",
    "section": "Data types and structures in R",
    "text": "Data types and structures in R\nDataframes are lists of vectors with a particular type that should be assigned appropriately.\n\n\nFrom the mydtaXls file the 5th to 16th row is selected (before the comma in brackets), for the columns 1 to 3, 6, 7, 10 and 11 (after the comma in brackets).\n\n\n\n\nrows &lt;- c(1:3,6,8,10,186:189)\n(dta &lt;- mydtaXls[rows,c(1:3,6,7,10:11)])\n\n# A tibble: 10 × 7\n   Pte      Dx        P Size mm (FMT,VZ, QRT…¹ `FMT (mm)` `Measurement in endom`\n   &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;                       &lt;dbl&gt; &lt;chr&gt;                 \n 1 1        TB        3 VZ 24 (vierling)               NA Y                     \n 2 2        TB        1 FMT 13                         13 Y/N                   \n 3 3        FLIN      1 VZ 23                          NA Y                     \n 4 6        TB        3 FMT 6                           6 N                     \n 5 8        TB        2 FMT 8                           8 Y                     \n 6 10       TB        4 VZ 45                          NA Y                     \n 7 186      PRR       1 infected heterotopic …         NA ?                     \n 8 186 non… &lt;NA&gt;     NA &lt;NA&gt;                           NA &lt;NA&gt;                  \n 9 PUL evol &lt;NA&gt;     NA &lt;NA&gt;                           NA &lt;NA&gt;                  \n10 1        PRR      NA 0                              NA ?                     \n# ℹ abbreviated name: ¹​`Size mm (FMT,VZ, QRT)`\n# ℹ 1 more variable: CL &lt;chr&gt;\n\n\n\n\n\n\nThe extremely useful str() function extracts the structure of the R object. Use it!!\n\n\n\n\nstr(dta)\n\ntibble [10 × 7] (S3: tbl_df/tbl/data.frame)\n $ Pte                  : chr [1:10] \"1\" \"2\" \"3\" \"6\" ...\n $ Dx                   : chr [1:10] \"TB\" \"TB\" \"FLIN\" \"TB\" ...\n $ P                    : num [1:10] 3 1 1 3 2 4 1 NA NA NA\n $ Size mm (FMT,VZ, QRT): chr [1:10] \"VZ 24 (vierling)\" \"FMT 13\" \"VZ 23\" \"FMT 6\" ...\n $ FMT (mm)             : num [1:10] NA 13 NA 6 8 NA NA NA NA NA\n $ Measurement in endom : chr [1:10] \"Y\" \"Y/N\" \"Y\" \"N\" ...\n $ CL                   : chr [1:10] \"?\" \"?\" \"1\" \"?\" ...\n\n\n\n\n\n\nThe classes in this case are tbl_df, tbl, data.frame. When tidyverse is loaded, dataframes are automatically assigned the extra class tbl_df and tbl with extra functionality (see future).\nIn the example the numeric P is reduced by 2, and then turned into a factor.\nThe Dx variable which is of type character is made a factor, which has levels.\nThe CL variable is made an ordered factor, with levels ‘yes’, ‘maybe’ and ‘no’ using the data 1, ? and 0.\nThe CL variable which is now a factor is turned into a numeric again, first making it a character vector (tricky issue: is to avoid obtaining the level ranks) and then making it a number.\nThe FMT (mm) variable is then assigned to the not yet existing fmt variable. Notice the `, these quotes are required because the variable name contains a space.   Finally, theFMT (mm)` is removed, simply by assigning it the NULL value.\n\n\n\n\ndta$P &lt;- factor(dta$P-2)\nlevels(dta$P)\n\n[1] \"-1\" \"0\"  \"1\"  \"2\" \n\ndta$Dx &lt;- factor(dta$Dx)\nlevels(dta$Dx)\n\n[1] \"FLIN\" \"PRR\"  \"TB\"  \n\ndta$newCL &lt;- factor(dta[,'CL'],\n    ordered=TRUE,\n    levels=c('1','?','0'),\n    labels=c('yes','maybe','no'))\ndta[,'CL'] &lt;- factor(dta[,'CL'],\n    levels=c('1','0'))\ndta$numCL &lt;- as.numeric(\n        as.character(dta$CL)\n    )\ndta$fmt &lt;- dta$`FMT (mm)`\ndta$`FMT (mm)` &lt;- NULL\n\n\n\n\n\nThe resulting structure is:\n\n\n\n\nstr(dta[,c('P','Dx','newCL','CL','numCL','fmt')])\n\ntibble [10 × 6] (S3: tbl_df/tbl/data.frame)\n $ P    : Factor w/ 4 levels \"-1\",\"0\",\"1\",\"2\": 3 1 1 3 2 4 1 NA NA NA\n $ Dx   : Factor w/ 3 levels \"FLIN\",\"PRR\",\"TB\": 3 3 1 3 3 3 2 NA NA 2\n $ newCL: Ord.factor w/ 3 levels \"yes\"&lt;\"maybe\"&lt;..: NA NA NA NA NA NA NA NA NA NA\n  ..- attr(*, \"names\")= chr [1:10] \"CL\" \"CL\" \"CL\" \"CL\" ...\n $ CL   : Factor w/ 2 levels \"1\",\"0\": NA NA NA NA NA NA NA NA NA NA\n  ..- attr(*, \"names\")= chr [1:10] \"CL\" \"CL\" \"CL\" \"CL\" ...\n $ numCL: num [1:10] NA NA NA NA NA NA NA NA NA NA\n $ fmt  : num [1:10] NA 13 NA 6 8 NA NA NA NA NA\n\n\n\n\nADVICE: first always check structure, change where necessary"
  },
  {
    "objectID": "rPrimer.html#applying-functions",
    "href": "rPrimer.html#applying-functions",
    "title": "R primer",
    "section": "Applying functions",
    "text": "Applying functions\nFunctions consist of code that you can execute, to process your data for example. Technically, R functions are also R objects.\n\n\nA few simple functions are summary() and table():\n\n\n\n\nsummary(dta$P)\n\n  -1    0    1    2 NA's \n   3    1    2    1    3 \n\nsummary(as.numeric(dta$P))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  1.000   1.000   2.000   2.143   3.000   4.000       3 \n\nsummary(as.numeric(as.character(dta$P)))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n-1.0000 -1.0000  0.0000  0.1429  1.0000  2.0000       3 \n\ntable(dta$P,useNA='always')\n\n\n  -1    0    1    2 &lt;NA&gt; \n   3    1    2    1    3 \n\ntable(as.numeric(dta$P),useNA='always')\n\n\n   1    2    3    4 &lt;NA&gt; \n   3    1    2    1    3 \n\n\n\n\nA summary taken from a factor offers a frequency table.\nA summary of a factor that is converted to numeric offers a few statistics (extrema, mean, …) calculated on the level ranks. This is probably not what is intended.\nA summary of a factor that is converted first to a character, then to numeric will correctly offer the statistics of the actual values.\nA table would offer a frequency table. Always be cautious when working with factors, they behave in sometimes complex ways.\nADVICE: first always check summaries and tables, change where necessary in order to detect anomalies\nAlmost all statistical analyses in R will use functions others created for you to execute on your data. Examples have been the lm(), aov(), and plot()."
  },
  {
    "objectID": "rPrimer.html#creating-functions",
    "href": "rPrimer.html#creating-functions",
    "title": "R primer",
    "section": "Creating functions",
    "text": "Creating functions\nInstead of using existing functions, it is possible to create your own. For simple data analysis this is rarely necessary but some basic understanding will probably help you understand how to use functions better.\nA function in R has the structure function(arglist) {body}.\nThe body contains a set of instructions that are executed each time the function is called. The list of arguments bring in the information required for the function to execute.\n\n\nA function that returns a random standard normal value could be:\nEach call of the function will execute it.\n\n\n\n\nmyRandomNormalValue &lt;- function(){ \n        return(rnorm(1)) \n    }\nmyRandomNormalValue()\n\n[1] -0.7645903\n\nmyRandomNormalValue()\n\n[1] -0.4786123\n\n\n\n\n\n\nA function that returns the value to the power 2 could be:\n\n\n\n\nmyValueToPower2 &lt;- function(val){ \n        return(val^2) \n    }\nmyValueToPower2(4)\n\n[1] 16\n\nmyValueToPower2(6)\n\n[1] 36\n\n\n\n\n\n\nAn assignment of a value to the argument sets the default value:\n\n\n\n\nmyValueToPower2 &lt;- function(val=10){ \n        return(val^2) \n    }\nmyValueToPower2(4)\n\n[1] 16\n\nmyValueToPower2()\n\n[1] 100\n\n\n\n\n\n\nIt is possible to use the functions as if they are the return value:\n\n\n\n\nmyValueToPower2() + myValueToPower2(8) / myValueToPower2(2)\n\n[1] 116\n\n\n\n\nFunctions will become more important when chunks of code are repeated many times."
  },
  {
    "objectID": "rPrimer.html#r-operators",
    "href": "rPrimer.html#r-operators",
    "title": "R primer",
    "section": "R operators",
    "text": "R operators\nR offers the typical operators any programming language would.\n\nArithmetic operators: + - * / ^ (power) %% (modulus) %|% (integer division)\nRelational operators: &lt; &gt; &lt;= =&gt; == != %in% (vector IN)\nLogical operators: ! & (elementwise AND) && (vector AND) | (elementwise OR) || (vector OR)\nAssignment operators: &lt;- ="
  },
  {
    "objectID": "rPrimer.html#r-control-structures",
    "href": "rPrimer.html#r-control-structures",
    "title": "R primer",
    "section": "R Control Structures",
    "text": "R Control Structures\nIt is possible to execute code conditionally. For simple data analysis this is rarely necessary but some basic understanding will probably help you understand other researcher’s code.\n\n\nExecute code dependent on a condition being true:\n\n\n\n\nif(rnorm(1)&gt;0){ \n    cat('the generated value was above 0\\n') }\n\n\n\n\n\nExecute code dependent on a condition being true and other code when false:\n\n\n\n\nifelse(rnorm(1)&gt;0,\n    'above',\n    'below')\n\n[1] \"below\"\n\n\n\n\n\n\nExecute code multiple times, using an indicator variable:\n\n\n\n\nfor(it in 1:10){\n    if(rnorm(1)&gt;0){ \n        cat(\n            'for it equal to',\n            it,\n            'the generated value was above 0\\n'\n        ) \n    }\n}\n\nfor it equal to 1 the generated value was above 0\nfor it equal to 2 the generated value was above 0\nfor it equal to 3 the generated value was above 0\nfor it equal to 4 the generated value was above 0\nfor it equal to 5 the generated value was above 0\nfor it equal to 7 the generated value was above 0\nfor it equal to 8 the generated value was above 0\n\n\n\n\n\n\nExecute a code as long as a condition holds:\n\n\n\n\nit &lt;- 3\nwhile(it &gt; 0){\n    cat('it =',it,'\\n')\n    it &lt;- it-1\n}\n\nit = 3 \nit = 2 \nit = 1 \n\n\n\n\nStill other control structures exist."
  },
  {
    "objectID": "rPrimer.html#r-help-files",
    "href": "rPrimer.html#r-help-files",
    "title": "R primer",
    "section": "R help files",
    "text": "R help files\n\n\nThe ? should give basic information on functions and how to use them.\nTo open the R help file, use the ? operator and the name of the function without brackets.\n\n\n\n\n?paste\n\n\n\nA help file in R consists of:\n\nreference to package it belongs to (eg., base, which is always loaded automatically)\ndescription\nusage with required arguments and their default value if any\narguments with additional information on the arguments\ndetails that could be of interest\nvalue with information on the result\nreferences for further information\nsee also for highlighting similar, or related functions\nexamples to show its use\n\nFrom the help file for paste():\n\npaste works on r objects that can be converted to character\na separator is put in between, by default a single space.\nthese values by default are not collapsed\n\n\n\nFor example, with a first object a numeric vector of 4 elements and a second object a character vector of 2 elements.\nEither use the default separator, a dash, and maybe collapse using a slash.\n\n\n\n\npaste(c(1:4),\n    c(\"a\",\"b\"))\n\n[1] \"1 a\" \"2 b\" \"3 a\" \"4 b\"\n\npaste(c(1:4),\n    c(\"a\",\"b\"),\n    sep='-')\n\n[1] \"1-a\" \"2-b\" \"3-a\" \"4-b\"\n\npaste(c(1:4),\n    c(\"a\",\"b\"),\n    sep='-',collapse='/')\n\n[1] \"1-a/2-b/3-a/4-b\""
  },
  {
    "objectID": "manipulation.html",
    "href": "manipulation.html",
    "title": "Data Wrangling with R’s tidyverse",
    "section": "",
    "text": "What-Why-Who\n\n\n\nCurrent draft aims to introduce researchers to data manipulation in R with the dplyr, tidyr, and stringr packages of the tidyverse ecosystem.\nOur target audience is primarily the research community at VUB / UZ Brussel, those who have some basic experience in R and want to know more.\nWe invite you to help improve this document by sending us feedback: wilfried.cools@vub.be"
  },
  {
    "objectID": "manipulation.html#data-manipulation-packages-in-tidyverse",
    "href": "manipulation.html#data-manipulation-packages-in-tidyverse",
    "title": "Data Wrangling with R’s tidyverse",
    "section": "Data manipulation packages in tidyverse",
    "text": "Data manipulation packages in tidyverse\n\nFocus on tidyverse package (Hadley Wickham etal.), an ecosystem that includes:\n\ndplyr for manipulating data frames [main focus]\ntidyr for tidying data [check Data Representation]\nstringr for dealing with texts\nforcats for dealing with factors\n…\n\n\nConvenient cheat sheets at https://rstudio.com/resources/cheatsheets/.\nPackage tidyverse is a very good extension of base R.\n\nit is much more consistent (functions and packages) → ecosystem\nit avoids poor historical choices, sets good defaults\nit explicitly links to tidy data"
  },
  {
    "objectID": "manipulation.html#getting-ahead-of-ourselves-with-dplyr",
    "href": "manipulation.html#getting-ahead-of-ourselves-with-dplyr",
    "title": "Data Wrangling with R’s tidyverse",
    "section": "Getting ahead of ourselves with dplyr",
    "text": "Getting ahead of ourselves with dplyr\n\n\ntoy dataset\nThe infamous mtcars data are used.\n\nload examplary data available in R packages: data( ) function\nobserve it’s structure with str( ) and first 6 observations head( ) function.\n\n\ndata(mtcars)\n\nNote: call data( ) without arguments to see all available datasets.\n\n\n\na base R look at the data with str( )\n\n\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\n\n\n\n\na tidyverse look at the data with glimpse( )\n\n\nglimpse(mtcars)\n\nRows: 32\nColumns: 11\n$ mpg  &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…\n$ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…\n$ wt   &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…\n$ qsec &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n$ vs   &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…\n$ am   &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n\nmtcars %&gt;% slice_head(n=6)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\n\n\n\n\nexamplary data manipulation\n\n\nGet the minimum value of the ratio of mpg over hp for each combination of am and cyl.\n\ntake the mtcars data,\n\nselect variables mpg, cyl, hp, am, and rename hp to hpow,\n\nsubset rows where hpow bigger than 3.5,\n\ncreate new variable mpgr as the ratio mpg on hpow,\n\nsummarize mpgr as the minimum for every combination of cyl and am,\nand reshape the result into a table with one row per cyl-value (4,6,8) and a column for each am value (0,1),\nwith column variable names renamed to am0 and am1.\n\n\n\n\n\nmtcars %&gt;%\n    select(mpg, cyl, hpow=hp, am) %&gt;%\n    filter(hpow &gt; 3.5) %&gt;%\n    mutate(mpgr = mpg/hpow) %&gt;%\n    group_by(cyl, am) %&gt;%\n    summarize(min=min(mpgr)) %&gt;%\n    pivot_wider(names_from=am,\n        values_from=min) %&gt;%\n    select(cyl,am0=`0`,am1=`1`)\n\n\n\n\n\n\n\n  \n    \n    \n      cyl\n      am0\n      am1\n    \n  \n  \n    4\n0.2216495\n0.1963303\n    6\n0.1560976\n0.1125714\n    8\n0.1068571\nNA"
  },
  {
    "objectID": "manipulation.html#dplyr-package-functions-to-manipulate-data",
    "href": "manipulation.html#dplyr-package-functions-to-manipulate-data",
    "title": "Data Wrangling with R’s tidyverse",
    "section": "dplyr package, functions to manipulate data",
    "text": "dplyr package, functions to manipulate data\n\nIn short: dplyr reflects the apply function in base R, and that it applies to dataframes d.\nThe functions included in dplyr are used for data manipulation, somewhat resembling SQL.\nThe dplyr package:\n\nfocus on manipulating dataframes (tibbles):\n\nsubsetting, altering, summarizing, ordering, combining, reshaping\n\nuse to transform data and explore data and statistical summaries:\n\nfor visualization, tabling, and/or modeling\n\n\nThe main -verbs- (see example above)\n\nfilter( ) : conditional selection of cases\nselect( ) : conditional selection of variables, allows reordering and renaming\nmutate( ) : creation of new variables based on existing variables\nsummarise( ) : reduce sets of values to single values\n\nThe verb to structure data (see example above)\n\ngroup_by( ) : internal grouping, undo with ungroup( )\nworks preceding main verbs\n\nThe verbs to enhance control on scope (advanced)\n\nacross( ) : new way of scoping (instead of *_it, *_at, *_all)\n\nworks for selection in mutate( ) and summarize( )\n\n\nAdditional dplyr verbs:\n\narrange( ) : ordering of cases\nsample_n( ) and sample_frac( ) : random sampling\nslice( ), transmute( ), rename( ), relocate( ), …\n\nVerbs to extend data\n\nbind_rows( ) and bind_cols( ) : append data of same structure\nleft_, right_, inner_, full_, semi_ and anti_ join( ) : join data using indicator variable(s)\n\nFinal comment: only the core of dplyr is discussed, much more is possible and you will find on the Net.\n\ngroup_by( )\n\nGrouping prepares data for group specific operations\n\nintro\n\n\nGet a glimpse of the data as before,\nnotice that it shows the grouping structure\n\nnumber of rows and columns\n\nin tidy data: observations and variables\n\nnumber of groups, and grouping variables\n\n4 groups: 2 am x 2 vs\n\n\nThe width is set for presentation purposes\n\n\n\n\ntst &lt;- mtcars %&gt;% group_by(am,vs)\nglimpse(tst,width=40)\n\n\n\nRows: 32\nColumns: 11\nGroups: am, vs [4]\n$ mpg  &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 1…\n$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4…\n$ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.…\n$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 1…\n$ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3…\n$ wt   &lt;dbl&gt; 2.620, 2.875, 2.320, 3.21…\n$ qsec &lt;dbl&gt; 16.46, 17.02, 18.61, 19.4…\n$ vs   &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1…\n$ am   &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0…\n$ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4…\n$ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2…\n\n\n\nActions on grouped data are grouped too,\neg., a frequency table, count the number of observations (count( ))\ngrouped data result in grouped counts\n\n\n\n\ntst %&gt;% count()\n\n\n\n\n\n\n\n  \n    \n    \n      am\n      vs\n      n\n    \n  \n  \n    0\n0\n12\n    0\n1\n7\n    1\n0\n6\n    1\n1\n7\n  \n  \n  \n\n\n\n\n\nRemove grouping with ungroup( )\nThis is good practice to avoid side effects !\nAlternatively, overwrite the initial grouping\nThe last grouping is used\n\n\n\n\ntst &lt;- tst %&gt;% ungroup( )\ntst %&gt;% count()\n\n\n\n\n\n\n\n  \n    \n    \n      n\n    \n  \n  \n    32\n  \n  \n  \n\n\n\n\n\nAlternatively, overwrite the initial grouping\nThe last grouping is used by default,\nunless additional arguments are used\nfor example .add and .drop\na first groups by vs\na second groups by am and vs\n\n\n\n\nmtcars %&gt;% group_by(am) %&gt;% group_by(vs)\nmtcars %&gt;% group_by(am) %&gt;% group_by(vs, .add=TRUE)\n\n\nTransformed variables can also be used for grouping\neg., cutting the mpg in 3 groups with cut( ) then use count( )\nNotice the intervals that are created.\n\n\n\n\ntst &lt;- mtcars %&gt;% group_by(mpg3 = cut(mpg, 3))\ntst %&gt;% count()\n\n\n\n\n\n\n\n  \n    \n    \n      mpg3\n      n\n    \n  \n  \n    (10.4,18.2]\n14\n    (18.2,26.1]\n13\n    (26.1,33.9]\n5\n  \n  \n  \n\n\n\n\n\n\n\n\nexercises\nembedded within the next sections\n\n\n\nfilter( )\n\nFiltering returns rows using matching conditions\n\nintro\n\n\nFiltering is subsetting rows\nGet a subset that includes only those rows with mpg above 30\n\n\n\n\nmtcars %&gt;% filter(mpg &gt; 30)\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n  \n  \n    32.4\n4\n78.7\n66\n4.08\n2.200\n19.47\n1\n1\n4\n1\n    30.4\n4\n75.7\n52\n4.93\n1.615\n18.52\n1\n1\n4\n2\n    33.9\n4\n71.1\n65\n4.22\n1.835\n19.90\n1\n1\n4\n1\n    30.4\n4\n95.1\n113\n3.77\n1.513\n16.90\n1\n1\n5\n2\n  \n  \n  \n\n\n\n\n\nInclude more than just one condition,\nTake only rows with mpg above 20 AND qsec below or equal to 18\nConsecutive filtering achieves the same.\n& for and\n| for or\n! for not\n\n\n\n\nmtcars %&gt;% filter(mpg &gt; 20 & qsec &lt;= 18)\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n  \n  \n    21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n    21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n    26.0\n4\n120.3\n91\n4.43\n2.140\n16.70\n0\n1\n5\n2\n    30.4\n4\n95.1\n113\n3.77\n1.513\n16.90\n1\n1\n5\n2\n  \n  \n  \n\n\n\n\n\nMore complex conditions can be specified\nTake rows with mpg above 30 OR qsec below 20 AND am equal to 0\nAll the rules of logic apply, parentheses included\n\n\n\n\nmtcars %&gt;% filter(mpg &gt; 30 | (qsec &gt; 20 & am==0))\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n  \n  \n    18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n    22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\n    32.4\n4\n78.7\n66\n4.08\n2.200\n19.47\n1\n1\n4\n1\n    30.4\n4\n75.7\n52\n4.93\n1.615\n18.52\n1\n1\n4\n2\n    33.9\n4\n71.1\n65\n4.22\n1.835\n19.90\n1\n1\n4\n1\n    21.5\n4\n120.1\n97\n3.70\n2.465\n20.01\n1\n0\n3\n1\n    30.4\n4\n95.1\n113\n3.77\n1.513\n16.90\n1\n1\n5\n2\n  \n  \n  \n\n\n\n\n\nGrouping also works here\nGet all distinct values of cyl per level of gear\nThis selects the first unique rows\n\n\n\n\nmtcars %&gt;% group_by(gear) %&gt;% distinct(cyl)\n\n\n\n\n\n\n\n  \n    \n    \n      gear\n      cyl\n    \n  \n  \n    4\n6\n    4\n4\n    3\n6\n    3\n8\n    3\n4\n    5\n4\n    5\n8\n    5\n6\n  \n  \n  \n\n\n\n\n\n\n\n\n\nexercises\nThe starwars dataset is already part of tidyverse, load it in !\n\n\nan R solution\ndata(starwars)\n\n\nHave a glimpse at the data, what data-types are included ?\n\n\na tidyverse solution\nglimpse(starwars)\n\n\nRows: 87\nColumns: 14\n$ name       &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color &lt;chr&gt; \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color &lt;chr&gt; \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  &lt;chr&gt; \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        &lt;chr&gt; \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     &lt;chr&gt; \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  &lt;chr&gt; \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      &lt;list&gt; &lt;\"The Empire Strikes Back\", \"Revenge of the Sith\", \"Return…\n$ vehicles   &lt;list&gt; &lt;\"Snowspeeder\", \"Imperial Speeder Bike\"&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, \"Imp…\n$ starships  &lt;list&gt; &lt;\"X-wing\", \"Imperial shuttle\"&gt;, &lt;&gt;, &lt;&gt;, \"TIE Advanced x1\",…\n\n\nFilter the rows to subset the data and retain only characters with light skin and brown eye color.\n\n\na tidyverse solution\nstarwars %&gt;% filter(skin_color == \"light\", eye_color == \"brown\")\n\n\n# A tibble: 7 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Leia Org…    150    49 brown      light      brown             19 fema… femin…\n2 Biggs Da…    183    84 black      light      brown             24 male  mascu…\n3 Cordé        157    NA brown      light      brown             NA fema… femin…\n4 Dormé        165    NA brown      light      brown             NA fema… femin…\n5 Raymus A…    188    79 brown      light      brown             NA male  mascu…\n6 Poe Dame…     NA    NA brown      light      brown             NA male  mascu…\n7 Padmé Am…    165    45 brown      light      brown             46 fema… femin…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nArrange the data according the character’s height, largest on top ! (google it!!)\n\n\na tidyverse solution\nstarwars %&gt;% arrange(desc(height))\n\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Yarael …    264    NA none       white      yellow          NA   male  mascu…\n 2 Tarfful     234   136 brown      brown      blue            NA   male  mascu…\n 3 Lama Su     229    88 none       grey       black           NA   male  mascu…\n 4 Chewbac…    228   112 brown      unknown    blue           200   male  mascu…\n 5 Roos Ta…    224    82 none       grey       orange          NA   male  mascu…\n 6 Grievous    216   159 none       brown, wh… green, y…       NA   male  mascu…\n 7 Taun We     213    NA none       grey       black           NA   fema… femin…\n 8 Rugor N…    206    NA none       green      orange          NA   male  mascu…\n 9 Tion Me…    206    80 none       grey       black           NA   male  mascu…\n10 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nWho is smallest (comes on top after arranging) ?\n\n\na tidyverse solution\nstarwars %&gt;% arrange(height)\n\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Yoda         66    17 white      green      brown            896 male  mascu…\n 2 Ratts T…     79    15 none       grey, blue unknown           NA male  mascu…\n 3 Wicket …     88    20 brown      brown      brown              8 male  mascu…\n 4 Dud Bolt     94    45 none       blue, grey yellow            NA male  mascu…\n 5 R2-D2        96    32 &lt;NA&gt;       white, bl… red               33 none  mascu…\n 6 R4-P17       96    NA none       silver, r… red, blue         NA none  femin…\n 7 R5-D4        97    32 &lt;NA&gt;       white, red red               NA none  mascu…\n 8 Sebulba     112    40 none       grey, red  orange            NA male  mascu…\n 9 Gasgano     122    NA none       white, bl… black             NA male  mascu…\n10 Watto       137    NA black      blue, grey yellow            NA male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nSlice the data and keep only the 5th to 10th observation ! (?slice)\n\n\na tidyverse solution\nstarwars %&gt;% slice(5:10)\n\n\n# A tibble: 6 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Leia Org…    150    49 brown      light      brown             19 fema… femin…\n2 Owen Lars    178   120 brown, gr… light      blue              52 male  mascu…\n3 Beru Whi…    165    75 brown      light      blue              47 fema… femin…\n4 R5-D4         97    32 &lt;NA&gt;       white, red red               NA none  mascu…\n5 Biggs Da…    183    84 black      light      brown             24 male  mascu…\n6 Obi-Wan …    182    77 auburn, w… fair       blue-gray         57 male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nSlice the top 2 observations for each gender (group your data) !\nWhat other functions are discussed at ?slice_head ?\n\n\na tidyverse solution\nstarwars %&gt;% group_by(gender) %&gt;% slice_head(n=2)\n\n\n# A tibble: 6 × 14\n# Groups:   gender [3]\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Leia Org…    150    49 brown      light      brown             19 fema… femin…\n2 Beru Whi…    165    75 brown      light      blue              47 fema… femin…\n3 Luke Sky…    172    77 blond      fair       blue              19 male  mascu…\n4 C-3PO        167    75 &lt;NA&gt;       gold       yellow           112 none  mascu…\n5 Ric Olié     183    NA brown      fair       blue              NA &lt;NA&gt;  &lt;NA&gt;  \n6 Quarsh P…    183    NA black      dark       brown             62 &lt;NA&gt;  &lt;NA&gt;  \n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nUse slice_sample( ) to randomly select 5 observations !\n\n\na tidyverse solution\nstarwars %&gt;% slice_sample(n = 5)\n\n\n# A tibble: 5 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Ayla Sec…    178    55 none       blue       hazel             48 fema… femin…\n2 Taun We      213    NA none       grey       black             NA fema… femin…\n3 Cliegg L…    183    NA brown      fair       blue              82 male  mascu…\n4 Tion Med…    206    80 none       grey       black             NA male  mascu…\n5 R2-D2         96    32 &lt;NA&gt;       white, bl… red               33 none  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nUse slice_max( ) to select 3 observations with highest values on height !\n\n\na tidyverse solution\nstarwars %&gt;% slice_max(height, n = 3)\n\n\n# A tibble: 3 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Yarael P…    264    NA none       white      yellow            NA male  mascu…\n2 Tarfful      234   136 brown      brown      blue              NA male  mascu…\n3 Lama Su      229    88 none       grey       black             NA male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nRepeat the above, but ignore characters with missing data for mass\nNote, missing are those who are not ! missing is.na()\nand get the top 3 (highest mass) for each species !\n\n\na tidyverse solution\nstarwars %&gt;% group_by(species) %&gt;% filter(!is.na(mass)) %&gt;% slice_max(height, n = 3)\n\n\n# A tibble: 39 × 14\n# Groups:   species [32]\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Ratts T…     79    15 none       grey, blue unknown           NA male  mascu…\n 2 Dexter …    198   102 none       brown      yellow            NA male  mascu…\n 3 Ki-Adi-…    198    82 white      pale       yellow            92 male  mascu…\n 4 Zam Wes…    168    55 blonde     fair, gre… yellow            NA fema… femin…\n 5 IG-88       200   140 none       metal      red               15 none  mascu…\n 6 C-3PO       167    75 &lt;NA&gt;       gold       yellow           112 none  mascu…\n 7 R5-D4        97    32 &lt;NA&gt;       white, red red               NA none  mascu…\n 8 Sebulba     112    40 none       grey, red  orange            NA male  mascu…\n 9 Wicket …     88    20 brown      brown      brown              8 male  mascu…\n10 Poggle …    183    80 none       green      yellow            NA male  mascu…\n# ℹ 29 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\nselect( )\n\nExtract columns (variables) by name, rename and/or reorder them\n\nintro\n\n\nSelect the variable mpg\nNotice that even with one column, the result remains a dataframe (not a vector), this is tidyverse policy !\nAn operation on a data with a certain type should result in data of the same type.\n\n\n\n\nmtcars %&gt;% select(mpg)\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n    \n  \n  \n    21.0\n    21.0\n    22.8\n    21.4\n    18.7\n    18.1\n  \n  \n  \n\n\n\n\n\nTo retrieve a vector with dplyr use pull( )\nSpecific operations allow for changing the data types\n\n\n\n\nmtcars %&gt;% pull(mpg)\n\n\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\n\n\nExtract columns qsec and mpg (top 6 observations) More than one column can be considered jointly, their order is specified as such\n\n\n\n\nmtcars %&gt;% select(qsec,mpg)\n\n\n\n\n\n\n\n  \n    \n    \n      qsec\n      mpg\n    \n  \n  \n    16.46\n21.0\n    17.02\n21.0\n    18.61\n22.8\n    19.44\n21.4\n    17.02\n18.7\n    20.22\n18.1\n  \n  \n  \n\n\n\n\n\nExtract the third and first column (top 6)\nColumns can be extracted by their position\n\n\n\n\nmtcars %&gt;% select(3,1)\n\n\n\n\n\n\n\n  \n    \n    \n      disp\n      mpg\n    \n  \n  \n    160\n21.0\n    160\n21.0\n    108\n22.8\n    258\n21.4\n    360\n18.7\n    225\n18.1\n  \n  \n  \n\n\n\n\n\nRemove columns at third to sixth position (top 6)\nTo remove, use a negation, but it is either keep or remove not both\n\n\n\n\nmtcars %&gt;% select(-c(3:6))\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n  \n  \n    21.0\n6\n16.46\n0\n1\n4\n4\n    21.0\n6\n17.02\n0\n1\n4\n4\n    22.8\n4\n18.61\n1\n1\n4\n1\n    21.4\n6\n19.44\n1\n0\n3\n1\n    18.7\n8\n17.02\n0\n0\n3\n2\n    18.1\n6\n20.22\n1\n0\n3\n1\n  \n  \n  \n\n\n\n\n\nhelper functions can facilitate selections\nUse partial string matching with contains( )\nExtract columns with names that include the string ar (show 6)\n\n\n\n\nmtcars %&gt;% select(contains('ar'))\n\n\n\n\n\n\n\n  \n    \n    \n      gear\n      carb\n    \n  \n  \n    4\n4\n    4\n4\n    4\n1\n    3\n1\n    3\n2\n    3\n1\n  \n  \n  \n\n\n\n\n\nUse regular expressions with matches( )\nExtract columns with names that include the string ar but with at least one element before and after it\n\n\n\n\nmtcars %&gt;% select(matches('.ar.'))\n\n\n\n\n\n\n\n  \n    \n    \n      carb\n    \n  \n  \n    4\n    4\n    1\n    1\n    2\n    1\n  \n  \n  \n\n\n\n\n\nVariables can be renamed during selection\nRename the cyl into cyl468 to reflect its values, same for vs and am, and select it together with mpg (show 6).\n\n\n\n\nmtcars %&gt;% select(mpg,cyl468=cyl,vs01=vs,am01=am)\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl468\n      vs01\n      am01\n    \n  \n  \n    21.0\n6\n0\n1\n    21.0\n6\n0\n1\n    22.8\n4\n1\n1\n    21.4\n6\n1\n0\n    18.7\n8\n0\n0\n    18.1\n6\n1\n0\n  \n  \n  \n\n\n\n\n\nRename the cyl, vs and am directly\n\n\n\n\nmtcars %&gt;% rename(cyl468=cyl,vs01=vs,am01=am)\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl468\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs01\n      am01\n      gear\n      carb\n    \n  \n  \n    21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n    21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n    22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n    21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n    18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n    18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n  \n  \n  \n\n\n\n\n\nNote that a select( ) will include the grouping variables by default\nGrouping variables are identified with group_cols( )\nCreate a grouping by vs and am, and extract only those columns\n\n\n\n\nmtcars %&gt;% group_by(vs,am) %&gt;% select(group_cols( ))\n\n\n\n\n\n\n\n  \n    \n    \n  \n  \n    \n      0 - 0\n    \n    \n    \n    \n    \n    \n    \n    \n      0 - 1\n    \n    \n    \n    \n    \n    \n    \n    \n      1 - 0\n    \n    \n    \n    \n    \n    \n    \n    \n      1 - 1\n    \n    \n    \n    \n    \n    \n    \n  \n  \n  \n\n\n\n\n\n\n\n\n\nexercises\nThe starwars dataset is probably still loaded into your workspace !\n\n\na tidyverse solution\ndata(starwars)\n\n\nSelect the columns hair, skin and eye color !\n\n\na tidyverse solution\nstarwars %&gt;% select(hair_color, skin_color, eye_color)\n\n\n# A tibble: 87 × 3\n   hair_color    skin_color  eye_color\n   &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;    \n 1 blond         fair        blue     \n 2 &lt;NA&gt;          gold        yellow   \n 3 &lt;NA&gt;          white, blue red      \n 4 none          white       yellow   \n 5 brown         light       brown    \n 6 brown, grey   light       blue     \n 7 brown         light       blue     \n 8 &lt;NA&gt;          white, red  red      \n 9 black         light       brown    \n10 auburn, white fair        blue-gray\n# ℹ 77 more rows\n\n\nUse the : operator for consecutive columns hair and eye color !\n\n\na tidyverse solution\nstarwars %&gt;% select(hair_color:eye_color)\n\n\n# A tibble: 87 × 3\n   hair_color    skin_color  eye_color\n   &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;    \n 1 blond         fair        blue     \n 2 &lt;NA&gt;          gold        yellow   \n 3 &lt;NA&gt;          white, blue red      \n 4 none          white       yellow   \n 5 brown         light       brown    \n 6 brown, grey   light       blue     \n 7 brown         light       blue     \n 8 &lt;NA&gt;          white, red  red      \n 9 black         light       brown    \n10 auburn, white fair        blue-gray\n# ℹ 77 more rows\n\n\nRemove these columns instead of selecting them !\n\n\na tidyverse solution\nstarwars %&gt;% select(-(hair_color:eye_color))\n\n\n# A tibble: 87 × 11\n   name    height  mass birth_year sex   gender homeworld species films vehicles\n   &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;   &lt;lis&gt; &lt;list&gt;  \n 1 Luke S…    172    77       19   male  mascu… Tatooine  Human   &lt;chr&gt; &lt;chr&gt;   \n 2 C-3PO      167    75      112   none  mascu… Tatooine  Droid   &lt;chr&gt; &lt;chr&gt;   \n 3 R2-D2       96    32       33   none  mascu… Naboo     Droid   &lt;chr&gt; &lt;chr&gt;   \n 4 Darth …    202   136       41.9 male  mascu… Tatooine  Human   &lt;chr&gt; &lt;chr&gt;   \n 5 Leia O…    150    49       19   fema… femin… Alderaan  Human   &lt;chr&gt; &lt;chr&gt;   \n 6 Owen L…    178   120       52   male  mascu… Tatooine  Human   &lt;chr&gt; &lt;chr&gt;   \n 7 Beru W…    165    75       47   fema… femin… Tatooine  Human   &lt;chr&gt; &lt;chr&gt;   \n 8 R5-D4       97    32       NA   none  mascu… Tatooine  Droid   &lt;chr&gt; &lt;chr&gt;   \n 9 Biggs …    183    84       24   male  mascu… Tatooine  Human   &lt;chr&gt; &lt;chr&gt;   \n10 Obi-Wa…    182    77       57   male  mascu… Stewjon   Human   &lt;chr&gt; &lt;chr&gt;   \n# ℹ 77 more rows\n# ℹ 1 more variable: starships &lt;list&gt;\n\n\nSelect all columns with a name ending with color (check help files on helper functions, use ?language) !\n\n\na tidyverse solution\nstarwars %&gt;% select(ends_with(\"color\"))\n\n\n# A tibble: 87 × 3\n   hair_color    skin_color  eye_color\n   &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;    \n 1 blond         fair        blue     \n 2 &lt;NA&gt;          gold        yellow   \n 3 &lt;NA&gt;          white, blue red      \n 4 none          white       yellow   \n 5 brown         light       brown    \n 6 brown, grey   light       blue     \n 7 brown         light       blue     \n 8 &lt;NA&gt;          white, red  red      \n 9 black         light       brown    \n10 auburn, white fair        blue-gray\n# ℹ 77 more rows\n\n\nUse select to rename homeworld to home_world !\n\n\na tidyverse solution\nstarwars %&gt;% select(home_world = homeworld)\n\n\n# A tibble: 87 × 1\n   home_world\n   &lt;chr&gt;     \n 1 Tatooine  \n 2 Tatooine  \n 3 Naboo     \n 4 Tatooine  \n 5 Alderaan  \n 6 Tatooine  \n 7 Tatooine  \n 8 Tatooine  \n 9 Tatooine  \n10 Stewjon   \n# ℹ 77 more rows\n\n\nDo the same with the rename( ) function !\n\n\na tidyverse solution\nstarwars %&gt;% rename(home_world = homeworld)\n\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 &lt;NA&gt;       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: home_world &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nSelect only the numeric variables, use where( ) and is.numeric( ) !\n\n\na tidyverse solution\nstarwars %&gt;% select(where(is.numeric))\n\n\n# A tibble: 87 × 3\n   height  mass birth_year\n    &lt;int&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1    172    77       19  \n 2    167    75      112  \n 3     96    32       33  \n 4    202   136       41.9\n 5    150    49       19  \n 6    178   120       52  \n 7    165    75       47  \n 8     97    32       NA  \n 9    183    84       24  \n10    182    77       57  \n# ℹ 77 more rows\n\n\nSelect only those variables with names height, mass and/or size, with any_of( ) !\n\n\na tidyverse solution\nstarwars %&gt;% select(any_of(c('height','mass','size')))\n\n\n# A tibble: 87 × 2\n   height  mass\n    &lt;int&gt; &lt;dbl&gt;\n 1    172    77\n 2    167    75\n 3     96    32\n 4    202   136\n 5    150    49\n 6    178   120\n 7    165    75\n 8     97    32\n 9    183    84\n10    182    77\n# ℹ 77 more rows\n\n\n\n\n\nmutate( )\n\nCreate new variables based on existing ones\n\nintro\n\n\nA new variable (column) mpg2 can be created by mpg value squared\n\n\n\n\nmtcars %&gt;% mutate(mpg2=mpg^2)\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      mpg2\n    \n  \n  \n    21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n441.00\n    21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n441.00\n    22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n519.84\n    21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n457.96\n    18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n349.69\n    18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n327.61\n  \n  \n  \n\n\n\n\n\nThe original value can also be overwritten\nThe mpg can be assigned the values of mpg squared\n\n\n\n\nmtcars %&gt;% mutate(mpg=mpg^2)\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n  \n  \n    441.00\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n    441.00\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n    519.84\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n    457.96\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n    349.69\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n    327.61\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n  \n  \n  \n\n\n\n\n\nBased on multiple variables, a new NEWVAR can represent the mpg value multiplied by the vs value\n\n\n\n\nmtcars %&gt;% mutate(NEWVAR=mpg*vs)\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      NEWVAR\n    \n  \n  \n    21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n0.0\n    21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n0.0\n    22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n22.8\n    21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n21.4\n    18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n0.0\n    18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n18.1\n  \n  \n  \n\n\n\n\n\nA new variable can be created based on a newly created variable as well.\nThe new NEWVAR is the mpg value multiplied by the vs value and this new variable is divided by the disp variable\n\n\n\n\nmtcars %&gt;% mutate(NEWVAR=mpg*vs,NEWVAR2=NEWVAR/disp)\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      NEWVAR\n      NEWVAR2\n    \n  \n  \n    21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n0.0\n0.00000000\n    21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n0.0\n0.00000000\n    22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n22.8\n0.21111111\n    21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n21.4\n0.08294574\n    18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n0.0\n0.00000000\n    18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n18.1\n0.08044444\n  \n  \n  \n\n\n\n\n\nwindow functions facilitate the automation of mutations (google for dplyr window functions). Add a column with the cumulative sum of mpg using cumsum( )\n\n\n\n\nmtcars %&gt;% mutate(NEWVAR=cumsum(mpg))\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      NEWVAR\n    \n  \n  \n    21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n21.0\n    21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n42.0\n    22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n64.8\n    21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n86.2\n    18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n104.9\n    18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n123.0\n  \n  \n  \n\n\n\n\n\nAdd a column with indicator whether the mpg is between 20 and 22\n\n\n\n\nmtcars %&gt;% mutate(NEWVAR=between(mpg,20,22)) \n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      NEWVAR\n    \n  \n  \n    21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\nTRUE\n    21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\nTRUE\n    22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\nFALSE\n    21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\nTRUE\n    18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\nFALSE\n    18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\nFALSE\n  \n  \n  \n\n\n\n\n\nAdd a row number dependent on the rank of mpg values, with the rownumber( ) function. When arranged by mpg this is more clear.\n\n\n\n\nmtcars %&gt;% mutate(id=row_number(mpg))\nmtcars %&gt;% mutate(id=row_number(mpg)) %&gt;% arrange(mpg)\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      id\n    \n  \n  \n    10.4\n8\n472\n205\n2.93\n5.250\n17.98\n0\n0\n3\n4\n1\n    10.4\n8\n460\n215\n3.00\n5.424\n17.82\n0\n0\n3\n4\n2\n    13.3\n8\n350\n245\n3.73\n3.840\n15.41\n0\n0\n3\n4\n3\n    14.3\n8\n360\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n4\n    14.7\n8\n440\n230\n3.23\n5.345\n17.42\n0\n0\n3\n4\n5\n    15.0\n8\n301\n335\n3.54\n3.570\n14.60\n0\n1\n5\n8\n6\n  \n  \n  \n\n\n\n\n\nGrouping variables can group the operations\nTo create a ranking within groups vs and am, rownumber( ) can be used again\nNotice, for each combination of vs and am, there will be a 1 (first), 2 (second)… for id.\n\n\n\n\nmtcars %&gt;% group_by(vs,am) %&gt;% mutate(id=row_number(mpg))\n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      gear\n      carb\n      id\n    \n  \n  \n    \n      0 - 0\n    \n    18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n3\n2\n11\n    14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n3\n4\n4\n    16.4\n8\n275.8\n180\n3.07\n4.070\n17.40\n3\n3\n9\n    17.3\n8\n275.8\n180\n3.07\n3.730\n17.60\n3\n3\n10\n    15.2\n8\n275.8\n180\n3.07\n3.780\n18.00\n3\n3\n6\n    10.4\n8\n472.0\n205\n2.93\n5.250\n17.98\n3\n4\n1\n    \n      0 - 1\n    \n    21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n4\n4\n4\n    21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n4\n4\n5\n    26.0\n4\n120.3\n91\n4.43\n2.140\n16.70\n5\n2\n6\n    15.8\n8\n351.0\n264\n4.22\n3.170\n14.50\n5\n4\n2\n    19.7\n6\n145.0\n175\n3.62\n2.770\n15.50\n5\n6\n3\n    15.0\n8\n301.0\n335\n3.54\n3.570\n14.60\n5\n8\n1\n    \n      1 - 0\n    \n    21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n3\n1\n4\n    18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n3\n1\n2\n    24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n4\n2\n7\n    22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n4\n2\n6\n    19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n4\n4\n3\n    17.8\n6\n167.6\n123\n3.92\n3.440\n18.90\n4\n4\n1\n    \n      1 - 1\n    \n    22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n4\n1\n2\n    32.4\n4\n78.7\n66\n4.08\n2.200\n19.47\n4\n1\n6\n    30.4\n4\n75.7\n52\n4.93\n1.615\n18.52\n4\n2\n4\n    33.9\n4\n71.1\n65\n4.22\n1.835\n19.90\n4\n1\n7\n    27.3\n4\n79.0\n66\n4.08\n1.935\n18.90\n4\n1\n3\n    30.4\n4\n95.1\n113\n3.77\n1.513\n16.90\n5\n2\n5\n  \n  \n  \n\n\n\n\n\n\n\n\nexercises\nThe starwars dataset is probably still loaded into your workspace !\n\n\nan R solution\ndata(starwars)\n\n\nCreate a new variable height_m with height divided by 100 !\n\n\na tidyverse solution\nstarwars %&gt;% mutate(height_m = height / 100) %&gt;% select(height_m, height, everything( ))\n\n\n# A tibble: 87 × 15\n   height_m height name    mass hair_color skin_color eye_color birth_year sex  \n      &lt;dbl&gt;  &lt;int&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;\n 1     1.72    172 Luke …    77 blond      fair       blue            19   male \n 2     1.67    167 C-3PO     75 &lt;NA&gt;       gold       yellow         112   none \n 3     0.96     96 R2-D2     32 &lt;NA&gt;       white, bl… red             33   none \n 4     2.02    202 Darth…   136 none       white      yellow          41.9 male \n 5     1.5     150 Leia …    49 brown      light      brown           19   fema…\n 6     1.78    178 Owen …   120 brown, gr… light      blue            52   male \n 7     1.65    165 Beru …    75 brown      light      blue            47   fema…\n 8     0.97     97 R5-D4     32 &lt;NA&gt;       white, red red             NA   none \n 9     1.83    183 Biggs…    84 black      light      brown           24   male \n10     1.82    182 Obi-W…    77 auburn, w… fair       blue-gray       57   male \n# ℹ 77 more rows\n# ℹ 6 more variables: gender &lt;chr&gt;, homeworld &lt;chr&gt;, species &lt;chr&gt;,\n#   films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nCreate the same new variable, but also define BMI as mass / height_m to the power 2 !\n\n\na tidyverse solution\nstarwars %&gt;% mutate(height_m = height / 100, BMI = mass / (height_m^2)) %&gt;% select(BMI, everything( ))\n\n\n# A tibble: 87 × 16\n     BMI name      height  mass hair_color skin_color eye_color birth_year sex  \n   &lt;dbl&gt; &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;\n 1  26.0 Luke Sky…    172    77 blond      fair       blue            19   male \n 2  26.9 C-3PO        167    75 &lt;NA&gt;       gold       yellow         112   none \n 3  34.7 R2-D2         96    32 &lt;NA&gt;       white, bl… red             33   none \n 4  33.3 Darth Va…    202   136 none       white      yellow          41.9 male \n 5  21.8 Leia Org…    150    49 brown      light      brown           19   fema…\n 6  37.9 Owen Lars    178   120 brown, gr… light      blue            52   male \n 7  27.5 Beru Whi…    165    75 brown      light      blue            47   fema…\n 8  34.0 R5-D4         97    32 &lt;NA&gt;       white, red red             NA   none \n 9  25.1 Biggs Da…    183    84 black      light      brown           24   male \n10  23.2 Obi-Wan …    182    77 auburn, w… fair       blue-gray       57   male \n# ℹ 77 more rows\n# ℹ 7 more variables: gender &lt;chr&gt;, homeworld &lt;chr&gt;, species &lt;chr&gt;,\n#   films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;, height_m &lt;dbl&gt;\n\n\nUse transmute to repeat the above mutation but keep only height_m and BMI !\n\n\na tidyverse solution\nstarwars %&gt;% transmute(height_m = height / 100, BMI = mass / (height_m^2))\n\n\n# A tibble: 87 × 2\n   height_m   BMI\n      &lt;dbl&gt; &lt;dbl&gt;\n 1     1.72  26.0\n 2     1.67  26.9\n 3     0.96  34.7\n 4     2.02  33.3\n 5     1.5   21.8\n 6     1.78  37.9\n 7     1.65  27.5\n 8     0.97  34.0\n 9     1.83  25.1\n10     1.82  23.2\n# ℹ 77 more rows\n\n\nCreate a new variable with the z-score of height (zcore = (value-mean)/sd) !\n\n\na tidyverse solution\nstarwars %&gt;% mutate(zscore=(height-mean(height,na.rm=T))/sd(height,na.rm=T)) %&gt;% select(zscore, everything( ))\n\n\n# A tibble: 87 × 15\n    zscore name    height  mass hair_color skin_color eye_color birth_year sex  \n     &lt;dbl&gt; &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;\n 1 -0.0678 Luke S…    172    77 blond      fair       blue            19   male \n 2 -0.212  C-3PO      167    75 &lt;NA&gt;       gold       yellow         112   none \n 3 -2.25   R2-D2       96    32 &lt;NA&gt;       white, bl… red             33   none \n 4  0.795  Darth …    202   136 none       white      yellow          41.9 male \n 5 -0.701  Leia O…    150    49 brown      light      brown           19   fema…\n 6  0.105  Owen L…    178   120 brown, gr… light      blue            52   male \n 7 -0.269  Beru W…    165    75 brown      light      blue            47   fema…\n 8 -2.22   R5-D4       97    32 &lt;NA&gt;       white, red red             NA   none \n 9  0.249  Biggs …    183    84 black      light      brown           24   male \n10  0.220  Obi-Wa…    182    77 auburn, w… fair       blue-gray       57   male \n# ℹ 77 more rows\n# ℹ 6 more variables: gender &lt;chr&gt;, homeworld &lt;chr&gt;, species &lt;chr&gt;,\n#   films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nNow create that z-score per species !\n\n\na tidyverse solution\nstarwars %&gt;% group_by(species) %&gt;% mutate(zscore=(height-mean(height,na.rm=T))/sd(height,na.rm=T)) %&gt;% select(zscore, species, height, everything( ))\n\n\n# A tibble: 87 × 15\n# Groups:   species [38]\n   zscore species height name    mass hair_color skin_color eye_color birth_year\n    &lt;dbl&gt; &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt;\n 1 -0.371 Human      172 Luke …    77 blond      fair       blue            19  \n 2  0.728 Droid      167 C-3PO     75 &lt;NA&gt;       gold       yellow         112  \n 3 -0.716 Droid       96 R2-D2     32 &lt;NA&gt;       white, bl… red             33  \n 4  2.02  Human      202 Darth…   136 none       white      yellow          41.9\n 5 -2.13  Human      150 Leia …    49 brown      light      brown           19  \n 6  0.108 Human      178 Owen …   120 brown, gr… light      blue            52  \n 7 -0.929 Human      165 Beru …    75 brown      light      blue            47  \n 8 -0.696 Droid       97 R5-D4     32 &lt;NA&gt;       white, red red             NA  \n 9  0.507 Human      183 Biggs…    84 black      light      brown           24  \n10  0.427 Human      182 Obi-W…    77 auburn, w… fair       blue-gray       57  \n# ℹ 77 more rows\n# ℹ 6 more variables: sex &lt;chr&gt;, gender &lt;chr&gt;, homeworld &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nCreate a gender indicator that replaces the male and female labels with m and f (use recode( )) !\n\n\na tidyverse solution\nstarwars %&gt;% mutate(new_value=recode(sex,'male'='m','female'='f')) %&gt;% select(new_value, sex, everything( ))\n\n\n# A tibble: 87 × 15\n   new_value sex   name  height  mass hair_color skin_color eye_color birth_year\n   &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt;\n 1 m         male  Luke…    172    77 blond      fair       blue            19  \n 2 none      none  C-3PO    167    75 &lt;NA&gt;       gold       yellow         112  \n 3 none      none  R2-D2     96    32 &lt;NA&gt;       white, bl… red             33  \n 4 m         male  Dart…    202   136 none       white      yellow          41.9\n 5 f         fema… Leia…    150    49 brown      light      brown           19  \n 6 m         male  Owen…    178   120 brown, gr… light      blue            52  \n 7 f         fema… Beru…    165    75 brown      light      blue            47  \n 8 none      none  R5-D4     97    32 &lt;NA&gt;       white, red red             NA  \n 9 m         male  Bigg…    183    84 black      light      brown           24  \n10 m         male  Obi-…    182    77 auburn, w… fair       blue-gray       57  \n# ℹ 77 more rows\n# ℹ 6 more variables: gender &lt;chr&gt;, homeworld &lt;chr&gt;, species &lt;chr&gt;,\n#   films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nCreate a gender indicator that, when sex is ‘none’ uses the species values and otherwise keeps the sex specification (use ifelse( )))!\n\n\na tidyverse solution\nstarwars %&gt;% mutate(new_value=ifelse(sex=='none',species,sex)) %&gt;% select(new_value, species, sex, everything( ))\n\n\n# A tibble: 87 × 15\n   new_value species sex    name    height  mass hair_color skin_color eye_color\n   &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;    \n 1 male      Human   male   Luke S…    172    77 blond      fair       blue     \n 2 Droid     Droid   none   C-3PO      167    75 &lt;NA&gt;       gold       yellow   \n 3 Droid     Droid   none   R2-D2       96    32 &lt;NA&gt;       white, bl… red      \n 4 male      Human   male   Darth …    202   136 none       white      yellow   \n 5 female    Human   female Leia O…    150    49 brown      light      brown    \n 6 male      Human   male   Owen L…    178   120 brown, gr… light      blue     \n 7 female    Human   female Beru W…    165    75 brown      light      blue     \n 8 Droid     Droid   none   R5-D4       97    32 &lt;NA&gt;       white, red red      \n 9 male      Human   male   Biggs …    183    84 black      light      brown    \n10 male      Human   male   Obi-Wa…    182    77 auburn, w… fair       blue-gray\n# ℹ 77 more rows\n# ℹ 6 more variables: birth_year &lt;dbl&gt;, gender &lt;chr&gt;, homeworld &lt;chr&gt;,\n#   films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\nsummarize( )\n\nReduce sets of values into their summaries, based on grouped data.\n\nintro\n\n\nA new variable (column) is created based on an existing one by summarizing, condensing the data\nThe mean of all mpg values can be obtained\n\n\n\n\nmtcars %&gt;% summarize(myAverage=mean(mpg))\n\n\n\n\n\n\n\n  \n    \n    \n      myAverage\n    \n  \n  \n    20.09062\n  \n  \n  \n\n\n\n\n\nMultiple summaries can be obtained jointly, the mean and standard deviation of all mpg values can be obtained\n\n\n\n\nmtcars %&gt;% summarize(myAvMpg=mean(mpg),mySdMpg=sd(mpg),myAvDisp=mean(disp),mySdDisp=sd(disp))\n\n\n\n\n\n\n\n  \n    \n    \n      myAvMpg\n      mySdMpg\n      myAvDisp\n      mySdDisp\n    \n  \n  \n    20.09062\n6.026948\n230.7219\n123.9387\n  \n  \n  \n\n\n\n\n\nGrouping variables are very natural to use with summarize( )\nThe mean of all mpg values can be obtained for each level of vs\n\n\n\n\nmtcars %&gt;% group_by(vs) %&gt;% summarize(myAverage=mean(mpg))\n\n\n\n\n\n\n\n  \n    \n    \n      vs\n      myAverage\n    \n  \n  \n    0\n16.61667\n    1\n24.55714\n  \n  \n  \n\n\n\n\n\nThe mean and standard deviation can be obtained for multiple variables too, for each group an average and standard deviation of mpg and disp for example\n\n\n\n\nmtcars %&gt;% group_by(vs,am) %&gt;% summarize(myAvMpg=mean(mpg),mySdMpg=sd(mpg),myAvDisp=mean(disp),mySdDisp=sd(disp))\n\n\n\n\n\n\n\n  \n    \n    \n      am\n      myAvMpg\n      mySdMpg\n      myAvDisp\n      mySdDisp\n    \n  \n  \n    \n      0\n    \n    0\n15.05000\n2.774396\n357.6167\n71.82349\n    1\n19.75000\n4.008865\n206.2167\n95.23362\n    \n      1\n    \n    0\n20.74286\n2.471071\n175.1143\n49.13072\n    1\n28.37143\n4.757701\n89.8000\n18.80213\n  \n  \n  \n\n\n\n\n\nThe total number of observations within a group, eg., vs, can be obtained with n( ), or using the special verb count( ).\n\n\n\n\nmtcars %&gt;% group_by(vs) %&gt;% count( )\nmtcars %&gt;% group_by(vs) %&gt;% summarize(mycount=n( ))\n\n\n\n\n\n\n\n  \n    \n    \n      vs\n      mycount\n    \n  \n  \n    0\n18\n    1\n14\n  \n  \n  \n\n\n\n\n\nMaking use of summary functions, summarizing can be more automated.\nFor example the number of distinct values in a vector for each combination vs and am can be obtained with n_distinct( ), and the third number of each group with can be obtained with nth( )\n\n\n\n\nmtcars %&gt;% group_by(vs,am) %&gt;% summarize(nrDist=n_distinct(mpg),`3th`=nth(mpg,3))\n\n\n\n\n\n\n\n  \n    \n    \n      am\n      nrDist\n      3th\n    \n  \n  \n    \n      0\n    \n    0\n10\n16.4\n    1\n5\n26.0\n    \n      1\n    \n    0\n7\n24.4\n    1\n6\n30.4\n  \n  \n  \n\n\n\n\n\n\n\n\n\nexercises\nThe starwars dataset is probably still loaded into your workspace !\n\n\nan R solution\ndata(starwars)\n\n\nSummarize the height into the average height (some missing values need to be dealt with, check ?mean) !\n\n\na tidyverse solution\nstarwars %&gt;% summarise(height = mean(height, na.rm = TRUE))\n\n\n# A tibble: 1 × 1\n  height\n   &lt;dbl&gt;\n1   174.\n\n\nRepeat to above, but group by species and sex, and include the average mass !\n\n\na tidyverse solution\nstarwars %&gt;% group_by(species,sex) %&gt;% summarize(height = mean(height, na.rm = TRUE), mass = mean(mass, na.rm = TRUE))\n\n\n# A tibble: 41 × 4\n# Groups:   species [38]\n   species   sex    height  mass\n   &lt;chr&gt;     &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Aleena    male      79   15  \n 2 Besalisk  male     198  102  \n 3 Cerean    male     198   82  \n 4 Chagrian  male     196  NaN  \n 5 Clawdite  female   168   55  \n 6 Droid     none     131.  69.8\n 7 Dug       male     112   40  \n 8 Ewok      male      88   20  \n 9 Geonosian male     183   80  \n10 Gungan    male     209.  74  \n# ℹ 31 more rows\n\n\n\n\n\nacross( )\n\nScoping a verb, the across( ) function allows for summarize( ) or mutate( ) operations on a set of variables\n\nintro\n\n\nSelect variables by either explicitly naming them or by extraction using dedicated functions.\nTurn both am and vs into a factor before calling the structure with glimpse( )\n\n\n\n\nmtcars %&gt;% select(mpg,cyl,am,vs) %&gt;% mutate(across(c('am','vs'),factor)) %&gt;% glimpse( )\n\n\n\nRows: 32\nColumns: 4\n$ mpg &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8, …\n$ cyl &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8, …\n$ am  &lt;fct&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, …\n$ vs  &lt;fct&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, …\n\n\n\nA factor is made from all variables in between cyl and vs with a : operator\n\n\n\n\nmtcars %&gt;% select(mpg,cyl,am,vs) %&gt;% mutate(across(cyl:vs,factor)) %&gt;% glimpse( )\n\n\n\nRows: 32\nColumns: 4\n$ mpg &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8, …\n$ cyl &lt;fct&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8, …\n$ am  &lt;fct&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, …\n$ vs  &lt;fct&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, …\n\n\n\nA factor is made from all variables that contain the letter combination ar\n\n\n\n\nmtcars %&gt;% select(mpg,cyl,gear,carb) %&gt;% mutate(across(contains(\"ar\"),factor)) %&gt;% glimpse( )\n\n\n\nRows: 32\nColumns: 4\n$ mpg  &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ gear &lt;fct&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb &lt;fct&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n\n\n\nThe accross( ) function allows for applying a list of functions For the first and third variable, a function is applied to obtain a median, a mean and an sd\n\n\n\n\ndescr &lt;- list(\n  md = ~median(.x, na.rm = TRUE),\n  av = ~mean(.x, na.rm = TRUE),\n  sd = ~sd(.x, na.rm = TRUE)\n)\nmtcars %&gt;% mutate(across(c(1,3), descr)) \n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      mpg_md\n      mpg_av\n      mpg_sd\n      disp_md\n      disp_av\n      disp_sd\n    \n  \n  \n    21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n19.2\n20.09062\n6.026948\n196.3\n230.7219\n123.9387\n    21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n19.2\n20.09062\n6.026948\n196.3\n230.7219\n123.9387\n    22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n19.2\n20.09062\n6.026948\n196.3\n230.7219\n123.9387\n    21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n19.2\n20.09062\n6.026948\n196.3\n230.7219\n123.9387\n    18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n19.2\n20.09062\n6.026948\n196.3\n230.7219\n123.9387\n    18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n19.2\n20.09062\n6.026948\n196.3\n230.7219\n123.9387\n  \n  \n  \n\n\n\n\n\nMaking use of helper functions, the same as for select( ), selections can be more automated.\nHelper functions include among others all_of( ), where( ), matches( ), starts_with( ) and are possible to use within mutate( ) and summarize( )\n\n\n\n\ndescr &lt;- list(\n  md = ~median(.x, na.rm = TRUE),\n  av = ~mean(.x, na.rm = TRUE),\n  sd = ~sd(.x, na.rm = TRUE)\n)\nmtcars %&gt;% mutate(across(c(1,3), descr)) \n\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      mpg_md\n      mpg_av\n      mpg_sd\n      disp_md\n      disp_av\n      disp_sd\n    \n  \n  \n    21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n19.2\n20.09062\n6.026948\n196.3\n230.7219\n123.9387\n    21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n19.2\n20.09062\n6.026948\n196.3\n230.7219\n123.9387\n    22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n19.2\n20.09062\n6.026948\n196.3\n230.7219\n123.9387\n    21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n19.2\n20.09062\n6.026948\n196.3\n230.7219\n123.9387\n    18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n19.2\n20.09062\n6.026948\n196.3\n230.7219\n123.9387\n    18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n19.2\n20.09062\n6.026948\n196.3\n230.7219\n123.9387\n  \n  \n  \n\n\n\n\n\n\n\n \n\n\nexercises\nThe starwars dataset is probably still loaded into your workspace !\n\n\na tidyverse solution\ndata(starwars)\n\n\nSummarize the numeric variables (use where( )) into their minimum and maximum (some missing values need to be dealt with) !\n\n\na tidyverse solution\nmin_max &lt;- list(\n  min = ~min(.x, na.rm = TRUE),\n  max = ~max(.x, na.rm = TRUE)\n)\nstarwars %&gt;% summarise(across(where(is.numeric), min_max))\n\n\n# A tibble: 1 × 6\n  height_min height_max mass_min mass_max birth_year_min birth_year_max\n       &lt;int&gt;      &lt;int&gt;    &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1         66        264       15     1358              8            896\n\n\n\n\n\njoin( )\n\nDatafiles can be combined using common variables that serve as key (cfr. relational databases).\n\nintro\n\n\nMethods differ primarily in how they deal with mismatches in key variable values\nAssume a cylinder specific datafile, mtcyl, with a 2 cylinder but no 8 cylinder unlike the mtcars (4,6,8)\n\n\n\n\nmtcyl &lt;- tribble(\n~cyl,~type,\n2,'small',\n4,'medium',\n6,'large'\n)\n\n\nCombine the mtcars and mtcyl but ignore the irrelevant cyl equal to 2 (not part of mtcars), with a left_join( )\nNotice that cyl equal to 8 turns out missing, because it is not specified in the -right- datafile\n\n\n\n\nmtcars %&gt;% left_join(mtcyl)\n\n\n\nJoining with `by = join_by(cyl)`\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      type\n    \n  \n  \n    21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\nlarge\n    21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\nlarge\n    22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\nmedium\n    21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\nlarge\n    18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\nNA\n    18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\nlarge\n  \n  \n  \n\n\n\n\n\nCombine the mtcars and mtcyl but ignore the cyl equal to 8 because it lacks information on type, with a right_join( )\nNotice that cyl equal to 2 is included, but turns out missing for most variables because it is not specified in the -left- datafile\n\n\n\n\nmtcars %&gt;% right_join(mtcyl)\n\n\n\nJoining with `by = join_by(cyl)`\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      type\n    \n  \n  \n    21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\nlarge\n    21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\nlarge\n    22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\nmedium\n    21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\nlarge\n    18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\nlarge\n    24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\nmedium\n  \n  \n  \n\n\n\n\n\nCombine the mtcars and mtcyl for only those observations with the linking variable cyl in both files, with an right_join( )\nNotice no missing values, but some data is not included\n\n\n\n\nmtcars %&gt;% inner_join(mtcyl)\n\n\n\nJoining with `by = join_by(cyl)`\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      type\n    \n  \n  \n    21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\nlarge\n    21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\nlarge\n    22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\nmedium\n    21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\nlarge\n    18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\nlarge\n    24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\nmedium\n  \n  \n  \n\n\n\n\n\nCombine the mtcars and mtcyl keeping all available information, with a full_join( ) showing selected rows 1 to 3, 5, 7 and 33\n\n\n\n\nmtcars %&gt;% full_join(mtcyl) %&gt;% slice(c(1:3,5,7,33))\n\n\n\nJoining with `by = join_by(cyl)`\n\n\n\n\n\n\n  \n    \n    \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      type\n    \n  \n  \n    21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\nlarge\n    21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\nlarge\n    22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\nmedium\n    18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\nNA\n    14.3\n8\n360\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\nNA\n    NA\n2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nsmall\n  \n  \n  \n\n\n\n\n\nOther types of join exist, like semi_join( ), nest_join( ), anti_join(), which are described in the help files.\n\n\n\n\n\n\n\n\nexercises\nTwo mini tibbles band_members and band_instruments are probably loaded into your workspace automatically as part of the tidyverse !\n\n\na tidyverse solution\nband_members\n\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\n\na tidyverse solution\nband_instruments\n\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n\n\nCombine the two, left/right/inner/full !\n\n\na tidyverse solution\nband_members %&gt;% inner_join(band_instruments)\n\n\nJoining with `by = join_by(name)`\n\n\n# A tibble: 2 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n\n\na tidyverse solution\nband_members %&gt;% left_join(band_instruments)\n\n\nJoining with `by = join_by(name)`\n\n\n# A tibble: 3 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 Mick  Stones  &lt;NA&gt;  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n\n\na tidyverse solution\nband_members %&gt;% right_join(band_instruments)\n\n\nJoining with `by = join_by(name)`\n\n\n# A tibble: 3 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith &lt;NA&gt;    guitar\n\n\na tidyverse solution\nband_members %&gt;% full_join(band_instruments)\n\n\nJoining with `by = join_by(name)`\n\n\n# A tibble: 4 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 Mick  Stones  &lt;NA&gt;  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith &lt;NA&gt;    guitar\n\n\nTry out the same with semi_join( ) and anti_join( ) and interpret what happens !\n\n\na tidyverse solution\nband_members %&gt;% semi_join(band_instruments)\n\n\nJoining with `by = join_by(name)`\n\n\n# A tibble: 2 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 John  Beatles\n2 Paul  Beatles\n\n\na tidyverse solution\nband_members %&gt;% anti_join(band_instruments)\n\n\nJoining with `by = join_by(name)`\n\n\n# A tibble: 1 × 2\n  name  band  \n  &lt;chr&gt; &lt;chr&gt; \n1 Mick  Stones"
  },
  {
    "objectID": "manipulation.html#dplyr-exercises-catching-up",
    "href": "manipulation.html#dplyr-exercises-catching-up",
    "title": "Data Wrangling with R’s tidyverse",
    "section": "dplyr exercises, catching up",
    "text": "dplyr exercises, catching up\nCompare the structure of the mtcars data with a glimpse at that data.\n\n\na tidyverse solution\nstr(mtcars)\n\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\na tidyverse solution\nglimpse(mtcars)\n\n\nRows: 32\nColumns: 11\n$ mpg  &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…\n$ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…\n$ wt   &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…\n$ qsec &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n$ vs   &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…\n$ am   &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n\n\nCompare a select of mpg with a pull of mpg.\n\n\na tidyverse solution\nmtcars %&gt;% select(mpg)\n\n\n                     mpg\nMazda RX4           21.0\nMazda RX4 Wag       21.0\nDatsun 710          22.8\nHornet 4 Drive      21.4\nHornet Sportabout   18.7\nValiant             18.1\nDuster 360          14.3\nMerc 240D           24.4\nMerc 230            22.8\nMerc 280            19.2\nMerc 280C           17.8\nMerc 450SE          16.4\nMerc 450SL          17.3\nMerc 450SLC         15.2\nCadillac Fleetwood  10.4\nLincoln Continental 10.4\nChrysler Imperial   14.7\nFiat 128            32.4\nHonda Civic         30.4\nToyota Corolla      33.9\nToyota Corona       21.5\nDodge Challenger    15.5\nAMC Javelin         15.2\nCamaro Z28          13.3\nPontiac Firebird    19.2\nFiat X1-9           27.3\nPorsche 914-2       26.0\nLotus Europa        30.4\nFord Pantera L      15.8\nFerrari Dino        19.7\nMaserati Bora       15.0\nVolvo 142E          21.4\n\n\na tidyverse solution\nmtcars %&gt;% pull(mpg)\n\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\n\nCheck the help file and pull out the second before last column.\n\n\na tidyverse solution\nmtcars %&gt;% pull(-3)\n\n\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n\n\na tidyverse solution\n# mtcars[,-(ncol(mtcars)-3)]\n\n\nSelect all columns except the am.\n\n\na tidyverse solution\nmtcars %&gt;% select(-am)\n\n\n                     mpg cyl  disp  hp drat    wt  qsec vs gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1    4    2\n\n\na tidyverse solution\n# mtcars[,-9]\n\n\nSelect all columns except the am and vs.\n\n\na tidyverse solution\nmtcars %&gt;% select(-am,-vs)\n\n\n                     mpg cyl  disp  hp drat    wt  qsec gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60    4    2\n\n\na tidyverse solution\n# mtcars[,!names(mtcars)%in%c('vs','am')]\n\n\nKeep only columns mpg, cyl and disp, but rename mpg to miles_gallon.\n\n\na tidyverse solution\nmtcars %&gt;% select(miles_gallon=mpg,cyl,disp)\n\n\n                    miles_gallon cyl  disp\nMazda RX4                   21.0   6 160.0\nMazda RX4 Wag               21.0   6 160.0\nDatsun 710                  22.8   4 108.0\nHornet 4 Drive              21.4   6 258.0\nHornet Sportabout           18.7   8 360.0\nValiant                     18.1   6 225.0\nDuster 360                  14.3   8 360.0\nMerc 240D                   24.4   4 146.7\nMerc 230                    22.8   4 140.8\nMerc 280                    19.2   6 167.6\nMerc 280C                   17.8   6 167.6\nMerc 450SE                  16.4   8 275.8\nMerc 450SL                  17.3   8 275.8\nMerc 450SLC                 15.2   8 275.8\nCadillac Fleetwood          10.4   8 472.0\nLincoln Continental         10.4   8 460.0\nChrysler Imperial           14.7   8 440.0\nFiat 128                    32.4   4  78.7\nHonda Civic                 30.4   4  75.7\nToyota Corolla              33.9   4  71.1\nToyota Corona               21.5   4 120.1\nDodge Challenger            15.5   8 318.0\nAMC Javelin                 15.2   8 304.0\nCamaro Z28                  13.3   8 350.0\nPontiac Firebird            19.2   8 400.0\nFiat X1-9                   27.3   4  79.0\nPorsche 914-2               26.0   4 120.3\nLotus Europa                30.4   4  95.1\nFord Pantera L              15.8   8 351.0\nFerrari Dino                19.7   6 145.0\nMaserati Bora               15.0   8 301.0\nVolvo 142E                  21.4   4 121.0\n\n\na tidyverse solution\n# mtcars &lt;- mtcars[,c('mpg','cyl','disp')]\n# names(mtcars)[1] &lt;- \"miles_gallon\"\n\n\nInsist, keep only columns mpg, cyl and disp, but rename mpg to miles per gallon.\n\n\na tidyverse solution\nmtcars %&gt;% select(`miles per gallon`=mpg,cyl,disp)\n\n\n                    miles per gallon cyl  disp\nMazda RX4                       21.0   6 160.0\nMazda RX4 Wag                   21.0   6 160.0\nDatsun 710                      22.8   4 108.0\nHornet 4 Drive                  21.4   6 258.0\nHornet Sportabout               18.7   8 360.0\nValiant                         18.1   6 225.0\nDuster 360                      14.3   8 360.0\nMerc 240D                       24.4   4 146.7\nMerc 230                        22.8   4 140.8\nMerc 280                        19.2   6 167.6\nMerc 280C                       17.8   6 167.6\nMerc 450SE                      16.4   8 275.8\nMerc 450SL                      17.3   8 275.8\nMerc 450SLC                     15.2   8 275.8\nCadillac Fleetwood              10.4   8 472.0\nLincoln Continental             10.4   8 460.0\nChrysler Imperial               14.7   8 440.0\nFiat 128                        32.4   4  78.7\nHonda Civic                     30.4   4  75.7\nToyota Corolla                  33.9   4  71.1\nToyota Corona                   21.5   4 120.1\nDodge Challenger                15.5   8 318.0\nAMC Javelin                     15.2   8 304.0\nCamaro Z28                      13.3   8 350.0\nPontiac Firebird                19.2   8 400.0\nFiat X1-9                       27.3   4  79.0\nPorsche 914-2                   26.0   4 120.3\nLotus Europa                    30.4   4  95.1\nFord Pantera L                  15.8   8 351.0\nFerrari Dino                    19.7   6 145.0\nMaserati Bora                   15.0   8 301.0\nVolvo 142E                      21.4   4 121.0\n\n\nKeep only the consecutive columns in between disp and wt, in addition to mpg as a last column, use a :.\n\n\na tidyverse solution\nmtcars %&gt;% select(disp:wt,mpg) %&gt;% names\n\n\n[1] \"disp\" \"hp\"   \"drat\" \"wt\"   \"mpg\" \n\n\na tidyverse solution\n# mtcars[,c(\"disp\", \"hp\", \"drat\", \"wt\", \"mpg\")]\n\n\nCreate a variable for the row names.\n\n\na tidyverse solution\nmtcars %&gt;% rownames_to_column('type')\n\n\n                  type  mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n1            Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n2        Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n3           Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n4       Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n5    Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n6              Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n7           Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n8            Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n9             Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n10            Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n11           Merc 280C 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n12          Merc 450SE 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n13          Merc 450SL 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n14         Merc 450SLC 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n15  Cadillac Fleetwood 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n16 Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n17   Chrysler Imperial 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n18            Fiat 128 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n19         Honda Civic 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n20      Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n21       Toyota Corona 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n22    Dodge Challenger 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n23         AMC Javelin 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n24          Camaro Z28 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n25    Pontiac Firebird 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n26           Fiat X1-9 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n27       Porsche 914-2 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n28        Lotus Europa 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n29      Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n30        Ferrari Dino 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n31       Maserati Bora 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n32          Volvo 142E 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\na tidyverse solution\n# mtcars$type &lt;- row.names(mtcars)\n\n\nChange the mpg (miles per gallon) into kpl (kilometers per liter) with 1 mpg is 0.425 km/l, using mutate( ).\n\n\na tidyverse solution\nmtcars %&gt;% mutate(kpl=mpg*.425)\n\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb     kpl\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4  8.9250\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4  8.9250\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1  9.6900\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1  9.0950\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2  7.9475\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1  7.6925\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4  6.0775\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 10.3700\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2  9.6900\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  8.1600\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4  7.5650\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3  6.9700\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3  7.3525\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3  6.4600\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  4.4200\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4  4.4200\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4  6.2475\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 13.7700\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 12.9200\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 14.4075\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1  9.1375\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2  6.5875\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2  6.4600\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4  5.6525\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2  8.1600\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 11.6025\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 11.0500\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 12.9200\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4  6.7150\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6  8.3725\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8  6.3750\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  9.0950\n\n\na tidyverse solution\n# mtcars$kpl &lt;- mtcars$mpg * .425\n\n\nSelect about 10% of the observations, twice, check the help file on using sample_frac( ).\n\n\na tidyverse solution\nmtcars %&gt;% sample_frac(.1)\n\n\n                  mpg cyl disp  hp drat    wt  qsec vs am gear carb\nDodge Challenger 15.5   8  318 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin      15.2   8  304 150 3.15 3.435 17.30  0  0    3    2\nPontiac Firebird 19.2   8  400 175 3.08 3.845 17.05  0  0    3    2\n\n\na tidyverse solution\nmtcars %&gt;% sample_frac(.1)\n\n\n            mpg cyl  disp  hp drat   wt  qsec vs am gear carb\nMerc 450SL 17.3   8 275.8 180 3.07 3.73 17.60  0  0    3    3\nDatsun 710 22.8   4 108.0  93 3.85 2.32 18.61  1  1    4    1\nMerc 450SE 16.4   8 275.8 180 3.07 4.07 17.40  0  0    3    3\n\n\nnote that the matrix way could be:\n\n\na tidyverse solution\n# mtcars[sample(1:32,3),]\nmtcars[sample(1:nrow(mtcars),round(nrow(mtcars)*.1)),]\n\n\n                   mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nToyota Corona     21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nChrysler Imperial 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nMerc 450SLC       15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n\n\nSelect the 10th to 15th row, check the help file on using slice( ).\n\n\na tidyverse solution\nmtcars %&gt;% slice(10:15)\n\n\n                    mpg cyl  disp  hp drat   wt  qsec vs am gear carb\nMerc 280           19.2   6 167.6 123 3.92 3.44 18.30  1  0    4    4\nMerc 280C          17.8   6 167.6 123 3.92 3.44 18.90  1  0    4    4\nMerc 450SE         16.4   8 275.8 180 3.07 4.07 17.40  0  0    3    3\nMerc 450SL         17.3   8 275.8 180 3.07 3.73 17.60  0  0    3    3\nMerc 450SLC        15.2   8 275.8 180 3.07 3.78 18.00  0  0    3    3\nCadillac Fleetwood 10.4   8 472.0 205 2.93 5.25 17.98  0  0    3    4\n\n\na tidyverse solution\n# mtcars[10:15,]\n\n\nSelect the distinct combinations only, for variables am and vs.\n\n\na tidyverse solution\nmtcars %&gt;% distinct(cyl,vs,am)\n\n\n                  cyl vs am\nMazda RX4           6  0  1\nDatsun 710          4  1  1\nHornet 4 Drive      6  1  0\nHornet Sportabout   8  0  0\nMerc 240D           4  1  0\nPorsche 914-2       4  0  1\nFord Pantera L      8  0  1\n\n\nCheck the help files to determine how to keep all variables (for each first observation of that combination).\n\n\na tidyverse solution\nmtcars %&gt;% distinct(cyl,vs,am,.keep_all=T)\n\n\n                   mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nDatsun 710        22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nMerc 240D         24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nPorsche 914-2     26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nFord Pantera L    15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n\n\nFilter the data to retain only cases with mpg &gt; 20 and hp above or equal to 110.\n\n\na tidyverse solution\nmtcars %&gt;% filter(mpg&gt;20, hp&gt;=110)\n\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nHornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n\n\nFilter the data to retain only the Datsun 710.\n\n\na tidyverse solution\nmtcars %&gt;% rownames_to_column('type') %&gt;% filter(type=='Datsun 710')\n\n\n        type  mpg cyl disp hp drat   wt  qsec vs am gear carb\n1 Datsun 710 22.8   4  108 93 3.85 2.32 18.61  1  1    4    1"
  },
  {
    "objectID": "manipulation.html#getting-ahead-of-ourselves-again",
    "href": "manipulation.html#getting-ahead-of-ourselves-again",
    "title": "Data Wrangling with R’s tidyverse",
    "section": "Getting ahead of ourselves again",
    "text": "Getting ahead of ourselves again\n\ntoy dataset\nA dataset can be read in, for example using the read_delim() function\nJust copy-paste data from notepad, excel or another spreadsheet program\nThe copy-pasted table can be assigned to the myrepeated object\n\nmyrepeated &lt;- read_delim(clipboard(),delim='\\t')\n\nThe clipboard() function is just one way, you can also specify a path to the data\nThe delimiter is \\t or TABs\nType ?read_delim to get details on more possibilities\nBecause you do not have it, it is included already\n\n\n# A tibble: 3 × 7\n  id    `t1 score` `t1 posit` `t2 score` `t2 posit` `t3 score` `t3 posit`\n  &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;     \n1 id1            1 x                  NA y                   4 x         \n2 id2            2 y                   3 x                  NA &lt;NA&gt;      \n3 id3            1 x                   2 y                   5 x         \n\n\n\n\nJoining with `by = join_by(id, time)`\n\n\n\n\nexamplary data tidying\n\n\nHaving it read in, it is tidied,\nit is turned into 2 different files that are joined after separating cell contents\n\nmake a dataset without the posit variables, and one without the score variables, and pivot the score or posit values from columns to rows identified by a new variable type\ndisentangle the values in type in two parts: time and type\nrecombine the two datasets after removing the new variable type from at least one of them\nremove all rows with missing values in either the variable score or posit\n\n\n\n\n\nscores &lt;- myrepeated %&gt;% \n    select(id,`t1 score`,`t2 score`,`t3 score`) %&gt;% \n    pivot_longer(-id,names_to='type',values_to='score')\npositions &lt;- myrepeated %&gt;% \n    select(id,`t1 posit`,`t2 posit`,`t3 posit`) %&gt;% \n    pivot_longer(-id,names_to='type',values_to='posit')\n\nscores &lt;- scores %&gt;% \n    separate(type,c('time','type'))\npositions &lt;- positions %&gt;% \n    separate(type,c('time','type'))\n\njoined &lt;- scores %&gt;% \n    select(-type) %&gt;% full_join(positions)\n\nlongform &lt;- joined %&gt;% \n    select(-type) %&gt;% filter(!is.na(score),!is.na(posit))\n\n\n\n\n\n\n\n  \n    \n    \n      id\n      time\n      score\n      posit\n    \n  \n  \n    id1\nt1\n1\nx\n    id1\nt3\n4\nx\n    id2\nt1\n2\ny\n    id2\nt2\n3\nx\n    id3\nt1\n1\nx\n    id3\nt2\n2\ny\n    id3\nt3\n5\nx\n  \n  \n  \n\n\n\n\n\n\nIt is possible to switch back to a wider data representation, for example to calculate correlations. Maybe fill in the missing values NA as 0 values.\n\nlongform %&gt;% pivot_wider(values_from=score,names_from=c(time,posit))\n# longform %&gt;% pivot_wider(values_from=score,names_from=c(time,posit),values_fill=list(score=0))\n\n\n\n# A tibble: 3 × 6\n  id     t1_x  t3_x  t1_y  t2_x  t2_y\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 id1       1     4    NA    NA    NA\n2 id2      NA    NA     2     3    NA\n3 id3       1     5    NA    NA     2"
  },
  {
    "objectID": "manipulation.html#tidyr-and-import-packages-functions-to-read-and-tidy-data",
    "href": "manipulation.html#tidyr-and-import-packages-functions-to-read-and-tidy-data",
    "title": "Data Wrangling with R’s tidyverse",
    "section": "tidyr and import packages, functions to read and tidy data",
    "text": "tidyr and import packages, functions to read and tidy data\n\nIn short: tidier combines a few functions to tidy up the data, a core idea in the development of the tidyverse\nBy enforcing a certain structure on the data, all functions defined to operate on that data can be made much more consistent too\nreadr combines a few functions to read in data, stored externally, in text format, excel, spss, …\nThe tidier and readr packages:\n\nfocus on importing data and making it tidy\n\nthe data has to be brought into the R workspace\nthe data has to be tidy for efficient further processing\n\nuse to create tidy data\n\na row for each research unit\na columns for each variable\na cell that links a research unit to a variable\n\nrequires\n\npivoting data into longer or wider form\ncreating pure variables\n\n\nThe main -verbs- (see example above)\n\npivot_wider( ) and pivot_longer( ): turn multiple columns or rows into one, making datafiles longer or wider\nseparate( ) and extract( ): create multiple columns from one column using delimiters or regular expressions\n\n\npivot_*()\n\nTurning long form data into wide form and vise verse, is called pivoting.\n\nintro\nIn tidy data each research unit is assigned to a row, in a tidy dataframe (tibble), what is the research unit depends on the research question and can change (eg., test score → student)\nContrary to univariate data representation, a multivariate data representation can be useful and be more intuitive\nThe change research units or to switch between uni -and multivariate, data can be pivoted, turned wider or longer\n\n\nFor the iris dataset, with 4 values for each unit within each species columns are turned into row-values with identifiers\nNotice that the column headers turn into cell values to serve as identifiers; a series of k columns turns into two columns of n x k rows\nNotice, from long to wide column names assigned to values in the data\n\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\n\n\n\n(long_iris &lt;- iris %&gt;% pivot_longer(-Species,names_to='type',values_to='score'))\n\n\n\n\n\n\n\n  \n    \n    \n      Species\n      type\n      score\n    \n  \n  \n    setosa\nSepal.Length\n5.1\n    setosa\nSepal.Width\n3.5\n    setosa\nPetal.Length\n1.4\n    setosa\nPetal.Width\n0.2\n    setosa\nSepal.Length\n4.9\n    setosa\nSepal.Width\n3.0\n  \n  \n  \n\n\n\n\n\nIt is possible to go the other direction, from longer to wider, but this requires at least identifiers of which row in the longer format belongs to which row in the wider format\nIn the particular case for the long form iris dataset, the univariate case, first an identifier is created\n\n\n\n\n\n\n  \n    \n    \n      Species\n      score\n    \n  \n  \n    \n      Petal.Length\n    \n    setosa\n1.4\n    setosa\n1.4\n    setosa\n1.3\n    setosa\n1.5\n    setosa\n1.4\n    setosa\n1.7\n    \n      Petal.Width\n    \n    setosa\n0.2\n    setosa\n0.2\n    setosa\n0.2\n    setosa\n0.2\n    setosa\n0.2\n    setosa\n0.4\n    \n      Sepal.Length\n    \n    setosa\n5.1\n    setosa\n4.9\n    setosa\n4.7\n    setosa\n4.6\n    setosa\n5.0\n    setosa\n5.4\n    \n      Sepal.Width\n    \n    setosa\n3.5\n    setosa\n3.0\n    setosa\n3.2\n    setosa\n3.1\n    setosa\n3.6\n    setosa\n3.9\n  \n  \n  \n\n\n\n\n\n\n\n\n  \n    \n    \n      Species\n      score\n      id\n    \n  \n  \n    \n      Petal.Length\n    \n    setosa\n1.4\n1\n    setosa\n1.4\n2\n    setosa\n1.3\n3\n    setosa\n1.5\n4\n    setosa\n1.4\n5\n    setosa\n1.7\n6\n    \n      Petal.Width\n    \n    setosa\n0.2\n1\n    setosa\n0.2\n2\n    setosa\n0.2\n3\n    setosa\n0.2\n4\n    setosa\n0.2\n5\n    setosa\n0.4\n6\n    \n      Sepal.Length\n    \n    setosa\n5.1\n1\n    setosa\n4.9\n2\n    setosa\n4.7\n3\n    setosa\n4.6\n4\n    setosa\n5.0\n5\n    setosa\n5.4\n6\n    \n      Sepal.Width\n    \n    setosa\n3.5\n1\n    setosa\n3.0\n2\n    setosa\n3.2\n3\n    setosa\n3.1\n4\n    setosa\n3.6\n5\n    setosa\n3.9\n6\n  \n  \n  \n\n\n\n\n\n\n\n\nlong_iris %&gt;% group_by(type)\nlong_iris %&gt;% group_by(type) %&gt;% mutate(id=1:n())\n\n\n\n\n\n\n\n  \n    \n    \n      Species\n      type\n      score\n      id\n    \n  \n  \n    setosa\nSepal.Length\n5.1\n1\n    setosa\nSepal.Width\n3.5\n1\n    setosa\nPetal.Length\n1.4\n1\n    setosa\nPetal.Width\n0.2\n1\n    setosa\nSepal.Length\n4.9\n2\n    setosa\nSepal.Width\n3.0\n2\n  \n  \n  \n\n\n\n\n\nTo pivot longer form to wider form, using an identifier for the groups, different identifying labels (names) are now used as column, and the values they relate to are grouped per row accordingly\nNotice, from wide to long names and values are taken from the data\n\n\n\n\nlong_iris %&gt;% group_by(type)\nlong_iris %&gt;% group_by(type) %&gt;% mutate(id=1:n()) %&gt;% pivot_wider(values_from=score,names_from=type)\n\n\n\n\n\n\n\n  \n    \n    \n      Species\n      score\n    \n  \n  \n    \n      Petal.Length\n    \n    setosa\n1.4\n    setosa\n1.4\n    setosa\n1.3\n    setosa\n1.5\n    setosa\n1.4\n    setosa\n1.7\n    \n      Petal.Width\n    \n    setosa\n0.2\n    setosa\n0.2\n    setosa\n0.2\n    setosa\n0.2\n    setosa\n0.2\n    setosa\n0.4\n    \n      Sepal.Length\n    \n    setosa\n5.1\n    setosa\n4.9\n    setosa\n4.7\n    setosa\n4.6\n    setosa\n5.0\n    setosa\n5.4\n    \n      Sepal.Width\n    \n    setosa\n3.5\n    setosa\n3.0\n    setosa\n3.2\n    setosa\n3.1\n    setosa\n3.6\n    setosa\n3.9\n  \n  \n  \n\n\n\n\n\n\n\n\n  \n    \n    \n      Species\n      score\n      id\n    \n  \n  \n    \n      Petal.Length\n    \n    setosa\n1.4\n1\n    setosa\n1.4\n2\n    setosa\n1.3\n3\n    setosa\n1.5\n4\n    setosa\n1.4\n5\n    setosa\n1.7\n6\n    \n      Petal.Width\n    \n    setosa\n0.2\n1\n    setosa\n0.2\n2\n    setosa\n0.2\n3\n    setosa\n0.2\n4\n    setosa\n0.2\n5\n    setosa\n0.4\n6\n    \n      Sepal.Length\n    \n    setosa\n5.1\n1\n    setosa\n4.9\n2\n    setosa\n4.7\n3\n    setosa\n4.6\n4\n    setosa\n5.0\n5\n    setosa\n5.4\n6\n    \n      Sepal.Width\n    \n    setosa\n3.5\n1\n    setosa\n3.0\n2\n    setosa\n3.2\n3\n    setosa\n3.1\n4\n    setosa\n3.6\n5\n    setosa\n3.9\n6\n  \n  \n  \n\n\n\n\n\nIf a unique row identifier was used going from wider to longer, then there would already be a grouping identifier to go back from longer to wider\nBut then the identifier must be removed from the variables to pivot\nNotice the extra -id after having created a unique row id\n\n\n\n\niris %&gt;% mutate(id=1:n()) %&gt;% \n    pivot_longer(-c(id,Species),names_to='type',values_to='score') %&gt;%\n    pivot_wider(names_from='type',values_from='score') %&gt;% \n    select(-id)\n\n\n\n\n\n\n\n  \n    \n    \n      Species\n      Sepal.Length\n      Sepal.Width\n      Petal.Length\n      Petal.Width\n    \n  \n  \n    setosa\n5.1\n3.5\n1.4\n0.2\n    setosa\n4.9\n3.0\n1.4\n0.2\n    setosa\n4.7\n3.2\n1.3\n0.2\n    setosa\n4.6\n3.1\n1.5\n0.2\n    setosa\n5.0\n3.6\n1.4\n0.2\n    setosa\n5.4\n3.9\n1.7\n0.4\n  \n  \n  \n\n\n\n\n\n\n\n\n\nexercises\nUse the world_bank_pop dataset that is part of the tidyr package\n\n\nan R solution\ndata(world_bank_pop)\n\n\nPivot the dataset to have univariate data for the scores over the different years\n\n\na tidyverse solution\nworld_bank_pop %&gt;% pivot_longer(-c(country,indicator),values_to='scores',names_to='year')\n\n\n# A tibble: 19,152 × 4\n   country indicator   year  scores\n   &lt;chr&gt;   &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;\n 1 ABW     SP.URB.TOTL 2000   41625\n 2 ABW     SP.URB.TOTL 2001   42025\n 3 ABW     SP.URB.TOTL 2002   42194\n 4 ABW     SP.URB.TOTL 2003   42277\n 5 ABW     SP.URB.TOTL 2004   42317\n 6 ABW     SP.URB.TOTL 2005   42399\n 7 ABW     SP.URB.TOTL 2006   42555\n 8 ABW     SP.URB.TOTL 2007   42729\n 9 ABW     SP.URB.TOTL 2008   42906\n10 ABW     SP.URB.TOTL 2009   43079\n# ℹ 19,142 more rows\n\n\nUse the us_rent_income dataset is also part of the tidyr package\nRemove variable moe before pivoting the estimates to wide form\n\n\na tidyverse solution\n(us_rent_income %&gt;% select(-moe) %&gt;% pivot_wider(values_from=estimate,names_from=variable))\n\n\n# A tibble: 52 × 4\n   GEOID NAME                 income  rent\n   &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt;\n 1 01    Alabama               24476   747\n 2 02    Alaska                32940  1200\n 3 04    Arizona               27517   972\n 4 05    Arkansas              23789   709\n 5 06    California            29454  1358\n 6 08    Colorado              32401  1125\n 7 09    Connecticut           35326  1123\n 8 10    Delaware              31560  1076\n 9 11    District of Columbia  43198  1424\n10 12    Florida               25952  1077\n# ℹ 42 more rows\n\n\nVerify what happens when you did not remove moe\n\n\na tidyverse solution\n(us_rent_income %&gt;% pivot_wider(values_from=estimate,names_from=variable))\n\n\n# A tibble: 104 × 5\n   GEOID NAME         moe income  rent\n   &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n 1 01    Alabama      136  24476    NA\n 2 01    Alabama        3     NA   747\n 3 02    Alaska       508  32940    NA\n 4 02    Alaska        13     NA  1200\n 5 04    Arizona      148  27517    NA\n 6 04    Arizona        4     NA   972\n 7 05    Arkansas     165  23789    NA\n 8 05    Arkansas       5     NA   709\n 9 06    California   109  29454    NA\n10 06    California     3     NA  1358\n# ℹ 94 more rows\n\n\nIt is possible to include multiple variables to pivot wide, jointly, use a vector of variables that includes estimate and moe, and see what happens\n\n\na tidyverse solution\n(us_rent_income %&gt;% pivot_wider(values_from=c(estimate,moe),names_from=variable))\n\n\n# A tibble: 52 × 6\n   GEOID NAME                 estimate_income estimate_rent moe_income moe_rent\n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 01    Alabama                        24476           747        136        3\n 2 02    Alaska                         32940          1200        508       13\n 3 04    Arizona                        27517           972        148        4\n 4 05    Arkansas                       23789           709        165        5\n 5 06    California                     29454          1358        109        3\n 6 08    Colorado                       32401          1125        109        5\n 7 09    Connecticut                    35326          1123        195        5\n 8 10    Delaware                       31560          1076        247       10\n 9 11    District of Columbia           43198          1424        681       17\n10 12    Florida                        25952          1077         70        3\n# ℹ 42 more rows\n\n\n\n\n\nseparate( ) / unite( )\n\nSplitting up information within a variable, or combining over variables, can enforce cell values to offer one and only one piece of information\n\nintro\nEach variable should consist of one type of information, in a tidy dataframe (tibble) - variables that combine information should often be split - variables that provide no meaningful information by themselves should be removed, sometimes united\n\n\nColumns (variables) can be split and united.\nThe long form iris data shows a type that consists of both Petal/Sepal and Length/Width, the can be separated\n\n\n\n\nlong_iris %&gt;% separate(type,c('PT','lw'))\n\n\n\n\n\n\n\n  \n    \n    \n      Species\n      PT\n      lw\n      score\n    \n  \n  \n    setosa\nSepal\nLength\n5.1\n    setosa\nSepal\nWidth\n3.5\n    setosa\nPetal\nLength\n1.4\n    setosa\nPetal\nWidth\n0.2\n    setosa\nSepal\nLength\n4.9\n    setosa\nSepal\nWidth\n3.0\n  \n  \n  \n\n\n\n\n\nOn the contrary, variables can also be united\nSeparated columns can be combined, using a separator dash in this case (default is underscore)\n\n\n\n\nlong_iris_x %&gt;% unite('myType',PT:lw,sep='-')\n\n\n\n# A tibble: 600 × 3\n   Species myType       score\n   &lt;fct&gt;   &lt;chr&gt;        &lt;dbl&gt;\n 1 setosa  Sepal-Length   5.1\n 2 setosa  Sepal-Width    3.5\n 3 setosa  Petal-Length   1.4\n 4 setosa  Petal-Width    0.2\n 5 setosa  Sepal-Length   4.9\n 6 setosa  Sepal-Width    3  \n 7 setosa  Petal-Length   1.4\n 8 setosa  Petal-Width    0.2\n 9 setosa  Sepal-Length   4.7\n10 setosa  Sepal-Width    3.2\n# ℹ 590 more rows\n\n\n\nThe tidyr package includes other functions for more involved programming and simulation studies Notice in particular expand( ), crossover( ), nesting( ), best check the helpfile.\n\n\n\n\n?expand\n\n\n\n\n\nexercises\nThe mtcars should still be loaded into your workspace\n\n\nan R solution\ndata(mtcars)\n\n\nTurn the row names to a variable called type using the rownames_to_column( ) function, it consists of car type information (maybe use type), car sub-type (subtype) and sub-type specification (spec)\nLook into the fill argument to ensure the the pieces of information are read in from right to left\n\n\na tidyverse solution\nmtcars %&gt;% rownames_to_column('type') %&gt;% \n    separate(type,c(\"type\",\"subtype\",\"spec\"),fill='right') %&gt;% \n    ungroup() %&gt;% my_gt(6)\n\n\n\n\n\n\n  \n    \n    \n      type\n      subtype\n      spec\n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n  \n  \n    Mazda\nRX4\nNA\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n    Mazda\nRX4\nWag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n    Datsun\n710\nNA\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n    Hornet\n4\nDrive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n    Hornet\nSportabout\nNA\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n    Valiant\nNA\nNA\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n  \n  \n  \n\n\n\n\nSeparate the type variable to isolate information on the type on one hand, and the rest on the other\n\n\na tidyverse solution\nmtcars %&gt;% rownames_to_column('type') %&gt;% \n    separate(type,c(\"type\",\"subtype\",\"spec\"),fill='right') %&gt;% unite(\"subtype\",c(\"subtype\",\"spec\")) %&gt;% ungroup() %&gt;% my_gt(6)\n\n\n\n\n\n\n  \n    \n    \n      type\n      subtype\n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n  \n  \n    Mazda\nRX4_NA\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n    Mazda\nRX4_Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n    Datsun\n710_NA\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n    Hornet\n4_Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n    Hornet\nSportabout_NA\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n    Valiant\nNA_NA\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1"
  },
  {
    "objectID": "manipulation.html#import-data-with-readr-readxl-or-haven",
    "href": "manipulation.html#import-data-with-readr-readxl-or-haven",
    "title": "Data Wrangling with R’s tidyverse",
    "section": "Import data with readr, readxl or haven",
    "text": "Import data with readr, readxl or haven\n\nwhen using your own data, they have to be imported into the workspace.\nData that are saved as R objects in a workspace (*.RData) can be loaded with the load( ) function\nData that need to be imported from elsewhere require dedicated functions (packages)\n\nreadr\nThe readr package in tidyverse deals with the basic data, like comma separated or tab-delimited data\n\nintro\n\n\nThe primary function in readr is read_delim( ) which imports tabular data with a delimiter as specified\nNote that a path to the data may need to be specified, in absolute terms or relative to the current working directory\n\n\n\n\ngetwd()\nsetwd(readClipboard())\nsetwd('../../my_sub_dir_2_levels_up')\n\n\nA delimiter should be specified, \\t for tabs\n?read_delim offers information on how to set many different arguments and gain flexibility to read in data\nIn this current working directory should have a tab-delimited file named repeated.txt\n\n\n\n\nmyrepeated &lt;- read_delim(file='repeated.txt',delim='\\t') # if \n\n\nData can be copy pasted in using the clipboard( ) instead of a path, or a path can be asked for interactively with file.choose( )\n\n\n\n\nmyrepeated &lt;- read_delim(clipboard(),delim='\\t')\nmyrepeated &lt;- read_delim(file.choose(),delim='\\t')\n\n\n\n\n\n\nreadxl\nThe readxl package in tidyverse deals with the notorious excel files\n\nintro\n\n\nThe primary function in readxl is read_excel( ) which imports tabular data from an excel file\nNote that a path to the data may need to be specified, in absolute terms or relative to the current working directory\nThe example_data_set.xlsx if it would exist in current working directory could be read in, possibly having assigned a particular sheet\nInteresting arguments are the sheet to read from, or the number of rows to skip\n?read_excel offers information on the many arguments that add flexibility for reading in data\n\n\n\n\nread_excel('example_data_set.xlsx', sheet='my_data', skip=1)\n\n\n\n\n\n\nhaven\nThe haven package in tidyverse deals with the data stored as part of one of the main statistical software, like SAS, spss and Stata\n\nintro\n\n\nFor SPSS, with *.sav files, Data is simply read, using default parameters read_sav( ) reads SPSS stored data\nThe haven package is not automatically loaded with tidyverse\nLet’s first get the path to the iris data as an example\n?read_sav for more information on the available arguments\n\n\n\n\nlibrary(haven)\npath_to_spss_examplary_data &lt;- system.file(\"examples\", \"iris.sav\", package = \"haven\")\nread_sav(path_to_spss_examplary_data)\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species   \n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl+lbl&gt; \n 1          5.1         3.5          1.4         0.2 1 [setosa]\n 2          4.9         3            1.4         0.2 1 [setosa]\n 3          4.7         3.2          1.3         0.2 1 [setosa]\n 4          4.6         3.1          1.5         0.2 1 [setosa]\n 5          5           3.6          1.4         0.2 1 [setosa]\n 6          5.4         3.9          1.7         0.4 1 [setosa]\n 7          4.6         3.4          1.4         0.3 1 [setosa]\n 8          5           3.4          1.5         0.2 1 [setosa]\n 9          4.4         2.9          1.4         0.2 1 [setosa]\n10          4.9         3.1          1.5         0.1 1 [setosa]\n# ℹ 140 more rows\n\n\n\nFor SAS, with for example *.sas7bdat files, data is read using default parameters\nLet’s again get the path to the iris data as an example\n?read_sas for more information on the available arguments\n\n\n\n\npath &lt;- system.file(\"examples\", \"iris.sas7bdat\", package = \"haven\")\nread_sas(path)\n\n\nFor Stata, with for example *.dta files, data is read using default parameters\nLet’s again get the pat to the iris data as an example\n?read_dta for more information on the available arguments\n\n\n\n\npath &lt;- system.file(\"examples\", \"iris.dta\", package = \"haven\")\nread_dta(path)\n\n\nTo write any of the files, use the write_ prefix, for dta, sas and sav\nTo write the mtcars into sas format.\n\n\n\n\nwrite_sas(mtcars,'mytryinSAS.sas7bdat')"
  },
  {
    "objectID": "manipulation.html#last-remarks",
    "href": "manipulation.html#last-remarks",
    "title": "Data Wrangling with R’s tidyverse",
    "section": "Last remarks",
    "text": "Last remarks\nCurrent page provides a primer on data manipulation, tidy data and the importing of data, which are the main steps in preparation of most real data analyses and visualizations.\nIt is strongly advised to play with the techniques discussed above to get some proficiency in using it, as it would add significantly to the flexibility of whatever you want to further do with your data.\n\nOther tidyverse package exist, and within the same framework many more are being developed. The consistency within the tidyverse ecosystem should give you a push though, to study the other packages yourself when of interest.\nBase R still is a proper alternative to the tidyverse ecosystem, so be aware that others may do things differently."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "overview",
    "section": "",
    "text": "Compiled Oct 11, 2023"
  },
  {
    "objectID": "index.html#advanced-r-course-tidyverse",
    "href": "index.html#advanced-r-course-tidyverse",
    "title": "overview",
    "section": "Advanced R course: tidyverse",
    "text": "Advanced R course: tidyverse\n\nadvanced: you need a bit of experience to understand this course\nnot advanced: it is still about simple stuff\n\ndata manipulation\ndata visualization\n\nsimple but important\n\nmanipulation and visualization linked to modeling\nbridges the gap between raw data and modeling\na large part of most analyses\n\nour focus: tidyverse\n\na set of R packages (with functions)\nin between raw data and modeling"
  },
  {
    "objectID": "index.html#tidyverse-why-it-exists",
    "href": "index.html#tidyverse-why-it-exists",
    "title": "overview",
    "section": "tidyverse: why it exists",
    "text": "tidyverse: why it exists\n\n\nR; a flexible open source statistical programming tool (2000)\n\nopen source: many contributors writing code their own way\nusers have to adapt to each package / function\n\ncommit to shared rules (not reduce R flexibility)\n\nconsistency in function names and (order of) arguments\nconsistency in terms of input and output\n\ndesign algorithms easier if known input.\ncontract with user → tidy data\ncontract with developer→ same type output\n\nintuitive defaults\nconstancy of data type by default\n\neg., function on dataframe results in dataframe by default\n\n\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\ntidyverse = first successful attempt to get R use more consistent\n\nearlier attempts failed\ntidyverse well thought through\ntidyverse makes sense for most\ntidyverse supported and promoted by Rstudio\n\necosystem emerges:\n\ntibble for data representation\ntidyr for tidying data\ndplyr for manipulating data frames\nggplot for visualizing data\nstringr for dealing with texts\nreadr for reading in data\nforcats for dealing with factors\npurrr for functional programming (advanced)\n…\n\n\nFind convenient cheat sheets at https://rstudio.com/resources/cheatsheets/."
  },
  {
    "objectID": "index.html#tidy-data-input",
    "href": "index.html#tidy-data-input",
    "title": "overview",
    "section": "tidy data (input)",
    "text": "tidy data (input)\n\nHadley Wickham’s ggplot (now works at Rstudio)\n\nvisualize data in agreement with grammar of graphics\n\nreadable\nintuitive\nlayered\n\nenforce ‘tidy’ data to keep visualization itself simpler\n\ntidy data\n\nobservations in focus assigned a row, each\ncolumns to add properties to these observations (cell values)\ntabular, possibly disentangled into multiple tables\n\ntibble\n\ndata.frame 2.0\ndo less, complain more"
  },
  {
    "objectID": "index.html#tidy-output",
    "href": "index.html#tidy-output",
    "title": "overview",
    "section": "tidy output",
    "text": "tidy output\nbroom package\n\nhomogenize statistical output\ncreate ‘tidy’ output\n\nmodel\nmodel components\nobservations\n\nalso turned into a tibble\n\ntidy the output\n\none-row model information glance\nmultiple row statistical summary tidy\nmodel based extended data augment"
  },
  {
    "objectID": "index.html#set-up-tidyverse-packages",
    "href": "index.html#set-up-tidyverse-packages",
    "title": "overview",
    "section": "Set up tidyverse packages",
    "text": "Set up tidyverse packages\n\nInstall (at least once) and load (once per R session) the tidyverse package.\n\ninstall.packages('tidyverse')\n\nThe individual packages that are loaded are listed, as are their conflicts.\n\nlibrary(tidyverse)\n\nConflicts arise loaded packages use the same function names. Resolve such conflicts for example by referencing the package with ::, eg., stat::filter( ).\nConflicts can be checked for tidyverse.\n\ntidyverse_conflicts( )\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nThe tidyverse ecosystem includes\nbroom, conflicted, cli, dbplyr, dplyr, dtplyr, forcats, ggplot2, googledrive, googlesheets4, haven, hms, httr, jsonlite, lubridate, magrittr, modelr, pillar, purrr, ragg, readr, readxl, reprex, rlang, rstudioapi, rvest, stringr, tibble, tidyr, xml2, tidyverse.\n\ntidyverse_packages( )\n\nMost of these packages should be loaded explicitly (not included in library(tidyverse))."
  },
  {
    "objectID": "index.html#tibbles-and-pipes",
    "href": "index.html#tibbles-and-pipes",
    "title": "overview",
    "section": "Tibbles and pipes",
    "text": "Tibbles and pipes\n\nData: the tibble is the tidyverse data type, defined in the tibble package.\n\nR data type for analysis is a dataframe, a list of equally sized vectors\n\nnumeric vector (either double, integer, or complex)\nfactor (ordered, not ordered)\nboolean vector\ncharacter\n\na tibble is a dataframe, enhanced for convenience and consistency\n\ndifferent default behavior\n\nprinting\nnaming\n…\nless forgiving\n\nexample: print\nno row-names\n\ncreate tibble with tibble( ) or tribble( ) function\n\nnotice that the class( ) shows both data.frame and tbl_df\n\nnotice that no row names, all information is made explicit as data\n\n\n\nmytibble &lt;- tibble(\n  colA = c(\"a\",\"b\",\"c\"),\n  colB = c(1:3)\n)\n(mytibble &lt;- tribble(\n  ~colA, ~colB,\n  \"a\",   1,\n  \"b\",   2,\n  \"c\",   3\n))\n\n# A tibble: 3 × 2\n  colA   colB\n  &lt;chr&gt; &lt;dbl&gt;\n1 a         1\n2 b         2\n3 c         3\n\nclass(mytibble)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\ncompare with dataframe:\n\n\nmydf &lt;- data.frame(colA=c('a','b','c'),colB=1:3)\nclass(mydf)\n\n[1] \"data.frame\"\n\n\nProcess: the magrittr package offer pipes %&gt;%\n\nR processes data with functions, eg., mean(mytibble$colB)\n\nreads inside-out, standard in base R and optional in tidyverse\n\nR data can be processed using pipes too, eg., mytibble %&gt;% summarize(mean(colB))\n\nreads left to right, standard in tidyverse (output turns into input)\nespecially of interest with multiple steps, serves readability\nexample: calculate the square rooted sum of squared differences between two variables\n\n\n\nx1 &lt;- rnorm(10); x2 &lt;- rnorm(10)\nsqrt(sum((x1-x2)^2))\n\n[1] 3.459238\n\n(x1-x2)^2 %&gt;% sum( ) %&gt;% sqrt( )\n\n[1] 3.459238"
  },
  {
    "objectID": "index.html#example-tidyverse",
    "href": "index.html#example-tidyverse",
    "title": "overview",
    "section": "Example: tidyverse",
    "text": "Example: tidyverse\nCreate factors\n\nfor data.frame mtcars\nchange the elements (mutate)\nfor all variables (across)\nwhere variable . &lt; 4 distinct values\nto factor\nand show the structure (glimpse)\n\n\nmtcars %&gt;% \n    mutate(\n        across(\n            where(~n_distinct(.)&lt;4),\n            as.factor)) %&gt;% \n    select(1:4) %&gt;% glimpse\n\n\n\nRows: 32\nColumns: 4\n$ mpg  &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  &lt;fct&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…"
  },
  {
    "objectID": "representation.html",
    "href": "representation.html",
    "title": "Data Representation",
    "section": "",
    "text": "Compiled Oct 11, 2023"
  },
  {
    "objectID": "representation.html#challenge",
    "href": "representation.html#challenge",
    "title": "Data Representation",
    "section": "Challenge",
    "text": "Challenge\n\n\n\n\n\n\nAIM\n\n\n\nLets generate an exam with questions ordered differently depending on the exam series, using R-markdown.\n\n\nTest yourself: create a data file for the following 4 participants (assuming many more), ready for analysis.\nRead through this draft and if necessary alter your solution.\nA possible solution is included at the end.\n\nEnid Charles, age 43,\n\nvisual score 16, mathematical score 2.4,\nsuggested methods A and B,\nperformance score at first time point 101 and second time point 105.\n\nGertrude Mary Cox, age 34,\n\nvisual score 26, mathematical score 1.4,\nsuggested methods A,\nperformance score at first time point missing and second time point 115.\n\nHelen Berg, age 53,\n\nvisual score 20, mathematical score missing,\nsuggested methods none (not A, nor B, nor C),\nperformance score at first time point 111 and second time point 110.\n\nGrace Wahba, age 50,\n\nvisual score 30, mathematical score above cut-off 10,\nsuggested methods A,\nperformance score at first time point 91 and second time point 115."
  },
  {
    "objectID": "representation.html#outline",
    "href": "representation.html#outline",
    "title": "Data Representation",
    "section": "Outline",
    "text": "Outline\nCurrent draft addresses data representation with the following outline:\n\na challenge: it is not always clear how (see above)\nerrors and inconveniences\ncommon problems and solutions\n\nIn following drafts, data manipulation, modeling and visualization are considered. Typically, all are more straightforward when data are more tidy."
  },
  {
    "objectID": "representation.html#errors-and-inconveniences",
    "href": "representation.html#errors-and-inconveniences",
    "title": "Data Representation",
    "section": "Errors and inconveniences",
    "text": "Errors and inconveniences\nTo avoid problems and frustration in your data analysis, it may be worthwhile to consider the checklist below. It points at various issues that have been encountered in actual data at ICDS and that are easy to avoid. In general most data offered by researchers whom did not attempt to do their own analysis, or at least the preliminary descriptives, is full with issues like the ones highlighted in this section.\nIn summary:\n\ninconsistencies\nambiguities / incompleteness\ninconveniences for either software or user\n\n\nError: inconsistent specification of cell values\nWhen labeling or scoring properties for research units (cells), avoid typo’s, inconsistent labeling, inconsistent scoring, …\nOften observed problems:\n\ntyping errors in values or labels, eg., man - women - womem or likely - likly - Likely,\ninconsistent use of capital letters, eg., man - Man - woman. Most statistical software is case sensitive (eg., R),\ninconsistent use of spaces (_), eg., man__ - man - _woman - woman,\ninconsistent use of decimal indicators, eg., 4.2 - 5,3 - 5,9. A comma is often used locally, a dot is used internationally (scientifically),\ninconsistent use of missing value indicators: _ - NA - 99. Software differ in their default, but consistency is key !\n\nAdvice: frequency tables often suffice to detect most of these errors, or a summary for numeric values.\n\n\n\n\n\n\n\nInconsistencies\n  \n    \n    \n      id\n      gender\n      score\n    \n  \n  \n    id1\nman\n4.2\n    id2\nMan\n5,3\n    id3\nman \n5,9\n    id4\nwoman\n3.1\n    id5\nwoman\n7,2\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nFrequencies\n  \n    \n    \n      Var1\n      Freq\n    \n  \n  \n    man\n1\n    Man\n1\n    man \n1\n    woman\n2\n  \n  \n  \n\n\n\n\n\n\nNote that the average score for the table on the left appears to be 3.65, do you see what went wrong ?\n\n\nError: ambiguous and incomplete specification of cell values\nWhen labeling or scoring properties for research units (cells), avoid ambiguity and incompleteness.\nOften observed problems within cells:\n\nempty cells not implying missing values\n\neg., those that imply the label above (eg., Excel showcase below with empty field meaning group 1),\neg., those implying either missing or none, no answer is different from the answer 0 or “” (eg., types variable in ambiguous - incomplete below),\n\ncombined numerical and non-numerical values, eg., 3.9 combined with &gt;10 (eg., score variable in ambiguous - incomplete below),\ncombined information within a cell, eg., A:B, A:C, B to signal treatments received (none or A, B, and/or C) (eg., types variable in ambiguous - incomplete below).\n\nEach cell should best be fully interpretable on its own, with reference to both row and column only. A codebook, discussed below, serves to alleviate any possible discrepancy between the data representation and the actual data.\nOften observed problems combining cells:\n\nmultiple line headers (eg., Excel showcase blood volume for both baseline and after treatment),\nmerged cells (eg., Excel showcase baseline measurement).\n\n\n\nInconvenience: use of special characters and numbers\nWhen labeling or scoring, or when specifying a variable name, avoid characters that may not be understood properly. Note that some characters call for specific operations in certain statistical software.\nOften observed inconveniences follow from using:\n\nspecial characters and spaces (eg., $, %, #, \", ',),\nuse of names starting with numbers (eg., 1st).\n\nAdvice: keep columns with text, not part of the statistical analysis, in a separate file.\n\n\n\n\n\n\n\nAmbiguous - Incomplete\n  \n    \n    \n      id\n      types\n      score\n    \n  \n  \n    id1\nA:B\n4.2\n    id2\nA\n\n    id3\nB\n5.9\n    id4\nA:B\n&gt;10\n    id5\n\n7.2\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nSpecial Characters\n  \n    \n    \n      id\n      type\n      score\n    \n  \n  \n    id1\n% use\n4.2\n    id2\n% use\n5,3\n    id3\n'run'\n5,9\n    id4\n'run'\n3.1\n    id5\n% use\n7,2\n  \n  \n  \n\n\n\n\n\n\n\n\nInconvenience: complex and lengthy labels and values\nWhen labeling variables or values, strike a balance between meaningful and simple. This is especially important when requesting help from data analysts who typically program their analysis and often do not understand your line of research. Some analysts may even prefer all values as numeric, (eg., 0 vs. 1) while others prefer short alphanumeric values (eg., male vs female).\n\n\nAdvice: To keep meaningful but long and complex headers, use a second line with simple headers to read in for the analysis. Maybe use patientID and id1 instead of patient_identifiers_of_first_block and patient_number_1.\n\n\n\n\n\n\n\n\nComplex and Lengthy\n  \n    \n    \n      patient_identifiers_of_first_block\n      my type\n      %mg rating\n    \n  \n  \n    patient identity number 1\ncondition with extra air\n4.2 mg/s\n    patient identity number 2\ncondition without extra air\n5,3 mg/s\n    patient identity number 3\ncondition with extra air\n5,9 mg/s\n    patient identity number 4\ncondition with extra air (stopped early)\n3.1 mg/s\n    patient identity number 5\ncondition without extra air\n7,2 mg/s\n  \n  \n  \n\n\n\n\n\nAdvice: To ensure a correct interpretation, now and later, the researcher could make the following distinction,\n\nuse numbers when values could be interpreted on a continuous scale,\nuse text with clear order like notAgree - neutral - agree,\nuse text postfixed with numbers with unclear order like r1 - r2 - r3 for ordinal scale not to be used as continuous,\nuse text for all remaining labels.\n\n\n\n\n\n\n\n\n\nAppropriate Labeling\n  \n    \n    \n      id\n      type\n      intensity\n      score\n      rank\n    \n  \n  \n    id1\nblack\nlow\n4.2\nrnk1\n    id2\nblack\nmedium\n5.3\nrnk4\n    id3\nred\nlow\n5.9\nrnk3\n    id4\nyellow\nhigh\n3.1\nrnk3\n    id5\nblack\nlow\n7.2\nrnk2\n  \n  \n  \n\n\n\n\n\n\nA codebook could address the relation between labels and their interpretation as well.\n\n\nInconvenience: irrelevant data\nWhen starting the analysis, or offering data to third parties, retain only the data of interest for the analysis. Store the remainder of the data in a secure place with an appropriate link.\n\n\nAn example of splitting up data into two tables, one for analysis and one for identification and context is included:\nNote that factor turns a variable into a factor (full set of possible values, numeric in essence but used for its labels). Turning factors as numeric provides the underlying numbers.\n\n\n\n\n\n\n\n\nComplex and Lengthy\n  \n    \n    \n      name\n      score1\n      score2\n      sumscore\n      comments\n    \n  \n  \n    Enid Charles\n3\n4\n7\nsome problems at the start\n    Gertrude Mary Cox\n3\n3\n6\n\n    Helen Berg\n4\n0\n4\npatient showed no interest\n    Grace Wahba\n4\n4\n8\n\n  \n  \n  \n\n\n\n\n\nAdvice: To ensure a correct interpretation, now and later, the researcher could make the following distinction,\n\nuse numbers when values could be interpreted on a continuous scale,\nuse text with clear order like notAgree - neutral - agree,\nuse text postfixed with numbers with unclear order like r1 - r2 - r3 for ordinal scale not to be used as continuous,\nuse text for all remaining labels.\n\n\n\n\n\n\n\n\n\nInconsistencies\n  \n    \n    \n      id\n      score1\n      score2\n      sumscore\n    \n  \n  \n    1\n3\n4\n7\n    2\n3\n3\n6\n    4\n4\n0\n4\n    3\n4\n4\n8\n  \n  \n  \n\n\n\n\n\n\n\n\n\nFrequencies\n  \n    \n    \n      id\n      name\n      comments\n    \n  \n  \n    1\nEnid Charles\nsome problems at the start\n    2\nGertrude Mary Cox\n\n    4\nHelen Berg\npatient showed no interest\n    3\nGrace Wahba\n\n  \n  \n  \n\n\n\n\n\n\n\n\nError: spreadsheets for human interpretation only\nSpreadsheets are convenient for representing data because their base structure is a table, with rows and columns, which you need for most statistical analysis, and because they allow for straightforward manipulations of data.\nManually constructed spreadsheets, Excel or other, unfortunately, promote the use of implicit information rather than the required explicit information. For example, cells are left empty because it is, at least for a human, clear from the context what the value should be (eg., Excel showcase, empty field meaning group 1 or 2).\n\nincompleteness due to implicit information\nuse of merged cells, not understood by algorithms\n\n\n\n\nExcel showcase\n\n\nExcel deserves special attention. Understandably very popular, it often does more than expected and can cause serious problems.\nOften observed problems:\n\ninappropriate cell types (eg., numeric values read in as if they are dates),\ninappropriate dimensions (eg., activated cells outside the data-frame or hidden columns),\n\nAdvice: A safe way to store data, once fully ready, could be a tab-delimited text file. While inconvenient to manipulate, risks for unwanted behavior are eliminated. It is straightforward to convert one into the other."
  },
  {
    "objectID": "representation.html#common-problems-and-solutions",
    "href": "representation.html#common-problems-and-solutions",
    "title": "Data Representation",
    "section": "Common problems and solutions",
    "text": "Common problems and solutions\nFor data analysis data is most often represented in one or more tables. It is repeated that:\n\nTables combine rows and columns into cells (see key message):\n\nwith rows that relate cells within a research unit (eg., a row contains all information about a particular observation),\nwith columns that relate cells to a property (eg., a column contains all information about a particular variable)\nwith cells that contain values which offer one and only one piece of information, combining a research unit and a property.\n\nTables for different but related research units are linked by identifiers (eg., table for observation information, table for participant information).\n\n\nA bad bad exemplary case, using R to turn it around\nWhile it is best to avoid a bad data table from the start, it is in many cases not impossible to convert tables into more appropriate forms.\nPurely for illustration purposes, R code is included using the tidyverse package to show a possible data transformation starting from a bad example turning it into another data representation. In current draft the focus is on data representation, not on changing it. More details on how to manipulate, visualize and model data are offered in future drafts.\nConsider this monstrous dataset, showing various features that are common in data offered for analysis.\n\n\n\n\n\nBad Bad Example\n  \n    \n    \n      id\n      young\n      old\n      stat\n      condA_time0\n      condA_time1\n      condA_time2\n      condB_time0\n      condB_time1\n      condB_time2\n      subst\n    \n  \n  \n    person1\nTRUE\nFALSE\nmin\nNA\n-10\nNA\nNA\nNA\nNA\ns1,s2\n    person1\nTRUE\nFALSE\nmax\nNA\n20\nNA\nNA\nNA\nNA\ns1,s2\n    person1\nTRUE\nFALSE\nmin\nNA\nNA\nNA\nNA\nNA\n0\n\n    person1\nTRUE\nFALSE\nmax\nNA\nNA\nNA\nNA\nNA\n25\n\n    person2\nFALSE\nTRUE\nmin\nNA\nNA\nNA\n5\nNA\nNA\ns2\n    person2\nFALSE\nTRUE\nmax\nNA\nNA\nNA\n15\nNA\nNA\ns2\n    person2\nFALSE\nTRUE\nmin\nNA\nNA\n0\nNA\nNA\nNA\ns1\n    person2\nFALSE\nTRUE\nmax\nNA\nNA\n10\nNA\nNA\nNA\ns1\n  \n  \n  \n\n\n\n\nApparently, substances (subst) can be s1, s2, both or none. So, having s1,s2 is partly overlapping with s1, but how does the algorithm know ? Lets turn this multiple selection item into multiple columns. Apparently, young and old are two variables, which makes no sense because you are either young or old, so lets remove one of them.\n\n\n\n\n\nSplit Combined Information\n  \n    \n    \n      id\n      young\n      stat\n      condA_time0\n      condA_time1\n      condA_time2\n      condB_time0\n      condB_time1\n      condB_time2\n      s1\n      s2\n    \n  \n  \n    person1\nTRUE\nmin\nNA\n-10\nNA\nNA\nNA\nNA\nTRUE\nTRUE\n    person1\nTRUE\nmax\nNA\n20\nNA\nNA\nNA\nNA\nTRUE\nTRUE\n    person1\nTRUE\nmin\nNA\nNA\nNA\nNA\nNA\n0\nFALSE\nFALSE\n    person1\nTRUE\nmax\nNA\nNA\nNA\nNA\nNA\n25\nFALSE\nFALSE\n    person2\nFALSE\nmin\nNA\nNA\nNA\n5\nNA\nNA\nFALSE\nTRUE\n    person2\nFALSE\nmax\nNA\nNA\nNA\n15\nNA\nNA\nFALSE\nTRUE\n    person2\nFALSE\nmin\nNA\nNA\n0\nNA\nNA\nNA\nTRUE\nFALSE\n    person2\nFALSE\nmax\nNA\nNA\n10\nNA\nNA\nNA\nTRUE\nFALSE\n  \n  \n  \n\n\n\n\nApparently, various columns contain variable values (consider 4th to 9th column). As the variable names suggest, observations are obtained under certain conditions, A or B, and at various time points, time 0, 1 or 2. In this example example condA_time1 partly overlaps with condA_time2 with which it shares a method, and partly overlaps with condB_time1 with which it shares a time point. Let’s turn these columns into values first, and at the same time simply ignore the missing values.\nObserve that the names of the columns turn into values in a column names messystuff, making the dataframe less wide and more long.\n\n\n\n\n\nFrom Wide to Long\n  \n    \n    \n      id\n      young\n      stat\n      s1\n      s2\n      messyStuff\n      scores\n    \n  \n  \n    person1\nTRUE\nmin\nTRUE\nTRUE\ncondA_time1\n-10\n    person1\nTRUE\nmax\nTRUE\nTRUE\ncondA_time1\n20\n    person1\nTRUE\nmin\nFALSE\nFALSE\ncondB_time2\n0\n    person1\nTRUE\nmax\nFALSE\nFALSE\ncondB_time2\n25\n    person2\nFALSE\nmin\nFALSE\nTRUE\ncondB_time0\n5\n    person2\nFALSE\nmax\nFALSE\nTRUE\ncondB_time0\n15\n    person2\nFALSE\nmin\nTRUE\nFALSE\ncondA_time2\n0\n    person2\nFALSE\nmax\nTRUE\nFALSE\ncondA_time2\n10\n  \n  \n  \n\n\n\n\nThe new column still combines two types of information, condition and time. The column should be split into two columns.\n\n\n\n\n\nSeparate Combined Information\n  \n    \n    \n      id\n      young\n      stat\n      s1\n      s2\n      cond\n      time\n      scores\n    \n  \n  \n    person1\nTRUE\nmin\nTRUE\nTRUE\ncondA\ntime1\n-10\n    person1\nTRUE\nmax\nTRUE\nTRUE\ncondA\ntime1\n20\n    person1\nTRUE\nmin\nFALSE\nFALSE\ncondB\ntime2\n0\n    person1\nTRUE\nmax\nFALSE\nFALSE\ncondB\ntime2\n25\n    person2\nFALSE\nmin\nFALSE\nTRUE\ncondB\ntime0\n5\n    person2\nFALSE\nmax\nFALSE\nTRUE\ncondB\ntime0\n15\n    person2\nFALSE\nmin\nTRUE\nFALSE\ncondA\ntime2\n0\n    person2\nFALSE\nmax\nTRUE\nFALSE\ncondA\ntime2\n10\n  \n  \n  \n\n\n\n\nMuch better. A last issue here is that the minimum and maximum could be variables and not values. No hard rules here, but often it is intuitively clear. So, let’s turn these values into variables to represent two types of observation.\n\ngoodExample &lt;- badExample %&gt;% \n    pivot_wider(names_from=stat,values_from=scores)\n\n\n\n\n\n\nFrom Long to Wide\n  \n    \n    \n      id\n      young\n      s1\n      s2\n      cond\n      time\n      min\n      max\n    \n  \n  \n    person1\nTRUE\nTRUE\nTRUE\ncondA\ntime1\n-10\n20\n    person1\nTRUE\nFALSE\nFALSE\ncondB\ntime2\n0\n25\n    person2\nFALSE\nFALSE\nTRUE\ncondB\ntime0\n5\n15\n    person2\nFALSE\nTRUE\nFALSE\ncondA\ntime2\n0\n10\n  \n  \n  \n\n\n\n\nWhile not convenient here, if there are many variables it may be interesting to split the table into different tables. Each table is research unit specific. So, let’s create a persons file and an observations file, and merge them together again afterwards.\n\n\nJoining with `by = join_by(id)`\n\n\n\n\n\n\n\n\n\nsimple persons table\n  \n    \n    \n      id\n      young\n    \n  \n  \n    person1\nTRUE\n    person2\nFALSE\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nsimple observations table\n  \n    \n    \n      id\n      s1\n      s2\n      cond\n      time\n      min\n      max\n    \n  \n  \n    person1\nTRUE\nTRUE\ncondA\ntime1\n-10\n20\n    person1\nFALSE\nFALSE\ncondB\ntime2\n0\n25\n    person2\nFALSE\nTRUE\ncondB\ntime0\n5\n15\n    person2\nTRUE\nFALSE\ncondA\ntime2\n0\n10\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\nMerged Again using Person as Identifier\n  \n    \n    \n      id\n      s1\n      s2\n      cond\n      time\n      min\n      max\n      young\n    \n  \n  \n    person1\nTRUE\nTRUE\ncondA\ntime1\n-10\n20\nTRUE\n    person1\nFALSE\nFALSE\ncondB\ntime2\n0\n25\nTRUE\n    person2\nFALSE\nTRUE\ncondB\ntime0\n5\n15\nFALSE\n    person2\nTRUE\nFALSE\ncondA\ntime2\n0\n10\nFALSE\n  \n  \n  \n\n\n\n\nVarious issues were highlighted, and will be discussed in more detail below.\n\nThe two most important points are\n\na long form (univariate) data representation is more flexible compared to a wide form (multivariate) one\nadditional columns can help isolate information in cells\n\n\n\n\nLong form representation\nIf within a research unit several scores are obtained, they can be represented within a row but often it is better or even necessary to unfold them into multiple rows that are identified with an indicator variable.\nFor example, consider a repeated measurements datafile, with multiple observations for each participant. The observations within a patient could be represented on a patient specific row (wide) with an identifier column for the participant, or one below the other covering several rows (long) with an indicator variable for both the participant (includes multiple rows) and the time of observation.\n\n\n\n\n\n\n\nLong\n  \n    \n    \n      id\n      type\n      score\n    \n  \n  \n    id1\ns1\n7\n    id1\ns2\n6\n    id2\ns1\n2\n    id2\ns2\n3\n    id3\ns1\n4\n    id3\ns2\n3\n    id4\ns1\n6\n    id4\ns2\n7\n    id5\ns1\n8\n    id5\ns2\n7\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nWide\n  \n    \n    \n      id\n      s1\n      s2\n    \n  \n  \n    id1\n7\n6\n    id2\n2\n3\n    id3\n4\n3\n    id4\n6\n7\n    id5\n8\n7\n  \n  \n  \n\n\n\n\n\n\nNote: the switch between both representations is easy. In Excel use pivot tables, in R many functions exist, for example the pivot_wider or pivot_longer in tidyr. Knowing how to transform data between wide and long form is very convenient and worth the effort learning about it.\n\n\nResearch unit specific tables\nIt may be appropriate to split up a table into different tables, as is done with relational databases, in order to combine all information in research unit specific tables. Different tables can be combined when of interest using key variables. This is particularly interesting as datafiles get bigger and as values are constant within blocks.\nFor example, a datafile could be split into a person datafile and an observation datafile. A person file only consists of person related properties that are constant for a particular person. An observation file consists of observation related properties that are constant for a particular observation. Note that the person providing the observation is represented once per observation.\n\n\n\n\n\n\n\nInformation Combined\n  \n    \n    \n      id\n      type\n      score\n    \n  \n  \n    id1\ns1\n7\n    id1\ns2\n6\n    id2\ns1\n2\n    id2\ns2\n3\n    id3\ns1\n4\n    id3\ns2\n3\n    id4\ns1\n6\n    id4\ns2\n7\n    id5\ns1\n8\n    id5\ns2\n7\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nA subset\n  \n    \n    \n      id\n      gender\n    \n  \n  \n    id1\nM\n    id2\nM\n    id3\nF\n    id4\nM\n    id5\nF\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nthe other subset\n  \n    \n    \n      id\n      type\n      score\n    \n  \n  \n    id1\ns1\n7\n    id1\ns2\n6\n    id2\ns1\n2\n    id2\ns2\n3\n    id3\ns1\n4\n    id3\ns2\n3\n    id4\ns1\n6\n    id4\ns2\n7\n    id5\ns1\n8\n    id5\ns2\n7\n  \n  \n  \n\n\n\n\n\n\nFor example, an additional table could be used to add item specific information about what the correct response is, how to score a particular response, or whether a score should be inverted when using it to summarize over an underlying scale. The main observation file includes the actual responses, not the scores.\n\nNote: to split up and merge tables is easy. In Excel use merge, in R use join in dplyr for example. Knowing how to split and combine data can be convenient.\n\n\nPossible but never observed responses\nA full data representation not only considers the actual data but also the possible data. The way to include this type of information is with additional tables that specify all possible outcomes. A codebook can also be used to provide this information in textual format.\n\n\nFor example, consider a question for which the response option fully agree was never selected, a separate table could include that option nevertheless.\n\n\n\n\n\n\nResponse File\n  \n    \n    \n      item\n      option\n      quality\n    \n  \n  \n    i1\no1\nwrong\n    i1\no2\ncorrect\n    i1\no3\nwrong\n    i2\no1\ncorrect\n    i2\no2\nwrong\n    i2\no3\nwrong\n  \n  \n  \n\n\n\n\n\nFor example, consider a question for which selecting none of the alternatives is a viable response, a separate table could include this.\n\n\n\n\n\n\nItem Responses\n  \n    \n    \n      id\n      item\n      response\n    \n  \n  \n    id1\ni1\no1\n    id1\ni2\no1\n    id2\ni1\no2\n    id2\ni2\no1\n    id3\ni1\no2\n    id3\ni2\no3\n  \n  \n  \n\n\n\n\n\n\nNote: it is possible to add option specific information, for example a score or indication of correctness. This has the advantage that the score can easily be changed and the used scores are easy to determine.\n\n\nDisentangling information: different situations\nA main point of interest is to include only one piece of information within a cell, unambiguously interpretable. Typically this would involve brining in additional columns.\n\nDifferent types of missingness\nIt could be of interest to distinguish between a missing value due to non-response, and a missing value by design. A full data registration can include an extra column for example, to signal for each missing value how to interpret it. A codebook can be an alternative in which codes are specified for different types of missing data.\n\n\n\n\n\n\n\nLabels with numbers\n  \n    \n    \n      id\n      score\n    \n  \n  \n    id1\n7\n    id2\nnot applicable\n    id3\n4\n    id4\nnot responded\n    id5\n8\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nDisentangled\n  \n    \n    \n      id\n      score\n      typeNA\n    \n  \n  \n    id1\n7\n\n    id2\n\nirrelevant\n    id3\n4\n\n    id4\n\nnonResponse\n    id5\n8\n\n  \n  \n  \n\n\n\n\n\n\n\n\nNumbers and ranges\nVariables sometimes combine both values and ranges of values. A possible full data registration adds a column to identify the ranges, so that the original column only includes values.\n\n\n\n\n\n\n\nLabels with numbers\n  \n    \n    \n      id\n      score\n    \n  \n  \n    id1\n7\n    id2\n2\n    id3\n4\n    id4\n&gt;10\n    id5\n8\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nDisentangled\n  \n    \n    \n      id\n      score\n      lwrBound\n    \n  \n  \n    id1\n7\nNA\n    id2\n2\nNA\n    id3\n4\nNA\n    id4\nNA\n10\n    id5\n8\nNA\n  \n  \n  \n\n\n\n\n\n\nNote: the original information is still available, but each variable contains only one type of information and cells have only numbers or (implied) ranges.\n\n\nCollections\nValues sometimes partially overlap so that they do not offer a single piece of information. A possible full data registration adds columns to isolate the different pieces of information.\n\n\n\n\n\n\n\nCombined Information\n  \n    \n    \n      id\n      score\n    \n  \n  \n    id1\nA:B\n    id2\nA\n    id3\n\n    id4\nB\n    id5\nA:B\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nDisentangled\n  \n    \n    \n      id\n      A\n      B\n    \n  \n  \n    id1\nTRUE\nTRUE\n    id2\nTRUE\nFALSE\n    id3\nFALSE\nFALSE\n    id4\nFALSE\nTRUE\n    id5\nTRUE\nTRUE\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nAdding order information\n  \n    \n    \n      id\n      A\n      B\n    \n  \n  \n    id1\n1\n2\n    id2\n1\nNA\n    id3\nNA\nNA\n    id4\nNA\n1\n    id5\n1\n2\n  \n  \n  \n\n\n\n\n\n\nNote that this way the combination of A and B is correctly considered as a combination of two constituting parts that were neither of them necessary. The original information is again easily retrieved from the available variables.\nNote: the original information is still available, but each variable contains only one type of information and cells have only numbers or boolean values."
  },
  {
    "objectID": "representation.html#codebook",
    "href": "representation.html#codebook",
    "title": "Data Representation",
    "section": "Codebook",
    "text": "Codebook\nIt is best to let data be as self-explanatory as possible and ready for automated processing.\nThe information that is impossible or very impractical to include in the actual table(s) should be explained in a codebook. A codebook explains the discrepancy between the data as represented and its meaning.\n\na codebook could include information on\n\nmeaning of variable / intended use\nmeasurement scale\n\nrange / set of possible values\n\ntypes of missingness and its coding\nhow data are collected\n\ntiming\ntools of observations\n\n. . .\n\n\nAn example for a codebook could be a file that shows:\n\n\n\n\n\n\n  \n    \n    \n      Variable\n      Label\n      measurement_scale\n      Responses_range\n      Remarks\n    \n  \n  \n    idnr\nIdentification number per patient\nnominal\n1 - 4\n\n    time\nwhich wave was the performance score assessed?\nbinary\n0 = first time point, 1 = second time point\n\n    score\nperformance score\ncontinuous\n0 - 150\n\n    age\nage of the participant\ncontinuous\n30 - 60 \nOnly participants between age 30 and 60 were included in the study\n    vis\nvisual score\ncontinuous\n0 - 40\n\n    math\nmathematical score\ncontinuous\n0 - 10\n\n    math10\nis mathematical score is larger than 10?\nbinary\nTRUE = (math &gt; 10)\nif FALSE than the mathematical score is displayed in the column math\n    A\nmethod A\nbinary\nTRUE = method A, otherwise FALSE\n\n    B\nmethod B\nbinary\nTRUE = method B, otherwise FALSE\n\n    C\nmethod C\nbinary\nTRUE = method C, otherwise FALSE"
  },
  {
    "objectID": "representation.html#solution",
    "href": "representation.html#solution",
    "title": "Data Representation",
    "section": "Solution",
    "text": "Solution\nA possible solution to the challenge above is presented here. Other more simple solutions are possible.\n\n\n\n\n\n\n\nPerson id File\n  \n    \n    \n      idnr\n      id\n    \n  \n  \n    1\nEnid Charles\n    2\nGertrude Mary Cox\n    3\nHelen Berg\n    4\nGrace Wahba\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nPerson Specific File\n  \n    \n    \n      idnr\n      age\n      vis\n      math\n      math10\n      A\n      B\n      C\n    \n  \n  \n    1\n43\n16\n2.4\nFALSE\nTRUE\nTRUE\nFALSE\n    2\n34\n26\n1.4\nFALSE\nTRUE\nFALSE\nFALSE\n    3\n53\n20\nNA\nNA\nFALSE\nFALSE\nFALSE\n    4\n50\n30\nNA\nTRUE\nTRUE\nFALSE\nFALSE\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\nMain File\n  \n    \n    \n      idnr\n      time\n      score\n    \n  \n  \n    1\n0\n101\n    1\n1\n105\n    2\n0\nNA\n    2\n1\n115\n    3\n0\n111\n    3\n1\n110\n    4\n0\n91\n    4\n1\n115\n  \n  \n  \n\n\n\n\n\n\nThe logged file, with observations, and the persons file, with person specific observation excluding identifiers can be combined, especially if the data is not too large.\n\n\nJoining with `by = join_by(idnr)`\n\n\n\n\n\nAdding order information\n  \n    \n    \n      idnr\n      time\n      score\n      age\n      vis\n      math\n      math10\n      A\n      B\n      C\n    \n  \n  \n    1\n0\n101\n43\n16\n2.4\nFALSE\nTRUE\nTRUE\nFALSE\n    1\n1\n105\n43\n16\n2.4\nFALSE\nTRUE\nTRUE\nFALSE\n    2\n0\nNA\n34\n26\n1.4\nFALSE\nTRUE\nFALSE\nFALSE\n    2\n1\n115\n34\n26\n1.4\nFALSE\nTRUE\nFALSE\nFALSE\n    3\n0\n111\n53\n20\nNA\nNA\nFALSE\nFALSE\nFALSE\n    3\n1\n110\n53\n20\nNA\nNA\nFALSE\nFALSE\nFALSE\n    4\n0\n91\n50\n30\nNA\nTRUE\nTRUE\nFALSE\nFALSE\n    4\n1\n115\n50\n30\nNA\nTRUE\nTRUE\nFALSE\nFALSE"
  },
  {
    "objectID": "rProgramming.html",
    "href": "rProgramming.html",
    "title": "Contemporary R programming",
    "section": "",
    "text": "Programming in R, quite similar to programming in other languages,\nespecially Python, Matlab, …\nLearning how to program, quite similar too\n\nprogram… a lot\nkeep solving your problems\nre-write !!\n\nMake the computer do the work for you\n\ncreate your own algorithms → to process input to output\ntalk to the computer\n\nsplit up a problem into small(er) steps\nfor each step, make everything explicit\n\ngain automation\n\ngain performance\n\ntweak & rerun\nweed away errors\n\ngain reproducibility\n\navoid\n\ncopy-pasting in your code ? Again !!\ntyping in specific values ? Again !!\nmake one change, and thus many others ? Again !!\n\n\nGet the most out of what you can do with the computer\n\nreadable code\n\nby future you, by peers / reviewers\nfrom well-documented to self-explanatory\n\neasily extendable and general code\n\nmodularity / encapsulation\navoid hard coding → use variables for flexibility\n\nefficient code (speed)\niterations (do x for every instance of y)"
  },
  {
    "objectID": "rProgramming.html#programming-in-r",
    "href": "rProgramming.html#programming-in-r",
    "title": "Contemporary R programming",
    "section": "",
    "text": "Programming in R, quite similar to programming in other languages,\nespecially Python, Matlab, …\nLearning how to program, quite similar too\n\nprogram… a lot\nkeep solving your problems\nre-write !!\n\nMake the computer do the work for you\n\ncreate your own algorithms → to process input to output\ntalk to the computer\n\nsplit up a problem into small(er) steps\nfor each step, make everything explicit\n\ngain automation\n\ngain performance\n\ntweak & rerun\nweed away errors\n\ngain reproducibility\n\navoid\n\ncopy-pasting in your code ? Again !!\ntyping in specific values ? Again !!\nmake one change, and thus many others ? Again !!\n\n\nGet the most out of what you can do with the computer\n\nreadable code\n\nby future you, by peers / reviewers\nfrom well-documented to self-explanatory\n\neasily extendable and general code\n\nmodularity / encapsulation\navoid hard coding → use variables for flexibility\n\nefficient code (speed)\niterations (do x for every instance of y)"
  },
  {
    "objectID": "rProgramming.html#the-essence-of-r-programming",
    "href": "rProgramming.html#the-essence-of-r-programming",
    "title": "Contemporary R programming",
    "section": "The Essence of R Programming",
    "text": "The Essence of R Programming\n\nFunctions and arguments\nDefine your own functions - to avoid repetition (reusable) - to increase readability - to reduce errors - to encapsulate code (scoping)\nUse build in functions: whenever you can - base R + use packages\nArguments → conditional implementation ~ flexibility\n\n\nIterations and Functions\nexample: cumulative sum:\n\nassume 4 numbers\n\n\nmy_sum &lt;- c(10,20,30,40)\n\n\nmanually get cumulative sum\n\n\nc(10,10+20,10+20+30,10+20+30+40)\n\n\nexisting function for the cumulative sum\n\n\ncumsum(my_sum)\n\n\niterate to get the cumulative sum\n\n\nout &lt;- numeric()\nfor(it in 1:length(my_sum)){\n  out &lt;- c(out,sum(out[it-1],my_sum[it]))\n  }\nout\n\n[1]  10  30  60 100\n\n\n\ndefine a function: &lt;- function( )\n\n\nmy_cumsum &lt;- function(values){\n  out &lt;- numeric()\n  for(it in 1:length(values)){ out &lt;- c(out,sum(out[it-1],values[it])) }\n  return(out) }\n\n\nuse that function\n\n\n# call and reuse\nmy_cumsum(my_sum)\nmy_cumsum(c(5,4,3))\n\n\nuse that function multiple times\n\n\n# for all at once\nmap(\n    list(\n        a=my_sum,\n        b=c(5,4,3)\n    ),\n    my_cumsum)\n\n\n\nPackages and Environments\n\nBring in functions defined in packages\n\nlocally install.packages('tidyverse')\nin your workspace library(tidyverse)\n\nNote: because tidyverse includes dplyr, the function select is understood.\n\n\nmtcars %&gt;% select(mpg,cyl) %&gt;% slice(1:2)\n\n              mpg cyl\nMazda RX4      21   6\nMazda RX4 Wag  21   6\n\n\nDifferent package - same function name\n\nlibrary(MASS)\n\n\nAttaching package: 'MASS'\n\n\nThe following object is masked from 'package:gtExtras':\n\n    select\n\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\n\n\nmtcars %&gt;% select(mpg,cyl) %&gt;% slice(1:2)\nError in select(., mpg, cyl) : unused arguments (mpg, cyl)\n\n\nFunctions are defined within environments\n\n\ngetAnywhere(select)\n\n3 differing objects matching 'select' were found\nin the following places\n  package:MASS\n  package:gtExtras\n  package:dplyr\n  namespace:dplyr\n  namespace:MASS\n  namespace:tidyselect\nUse [] to view one of them\n\n\n\n\nEnvironments and Namespaces\nPackages can be made explicit with ::\n\nenvironment(select)\n\n&lt;environment: namespace:MASS&gt;\n\nenvironment(dplyr::select)\n\n&lt;environment: namespace:dplyr&gt;\n\n\n\nmtcars %&gt;% dplyr::select(mpg,cyl)\n\nDifferent package - same function name\n\nlibrary(MASS)\n\n\nmtcars %&gt;% select(mpg,cyl) %&gt;% slice(1:2)\nError in select(., mpg, cyl) : unused arguments (mpg, cyl)\n\n\nFunctions are defined within environments\n\n\ngetAnywhere(select)\n\n3 differing objects matching 'select' were found\nin the following places\n  package:MASS\n  package:gtExtras\n  package:dplyr\n  namespace:dplyr\n  namespace:MASS\n  namespace:tidyselect\nUse [] to view one of them\n\n\nA package can be made default\n\nenvironment(select)\n\n&lt;environment: namespace:MASS&gt;\n\nenvironment(dplyr::select)\n\n&lt;environment: namespace:dplyr&gt;\n\n\n\nmtcars %&gt;% dplyr::select(mpg,cyl)\n\nExplicit: better but cumbersome\n\ncombine often used libraries on top\nuse :: for unique / rare use\noverwrite function name to be sure\n\n\nselect &lt;- dplyr::select\nmtcars %&gt;% select(mpg,cyl) %&gt;% slice(1:2)\n\n              mpg cyl\nMazda RX4      21   6\nMazda RX4 Wag  21   6\n\n\nA package can be made default\n\nenvironment(select)\n\n&lt;environment: namespace:dplyr&gt;\n\nenvironment(dplyr::select)\n\n&lt;environment: namespace:dplyr&gt;\n\n\n\nmtcars %&gt;% dplyr::select(mpg,cyl)"
  },
  {
    "objectID": "rProgramming.html#modularity-and-flexibility",
    "href": "rProgramming.html#modularity-and-flexibility",
    "title": "Contemporary R programming",
    "section": "Modularity and Flexibility",
    "text": "Modularity and Flexibility\nSolve big problems\n\nby solving many small problems (chain)\nby extending small problems (embed)\n\nChunks of code (eg., functions),each with simple input and output\nMake code run for the more general case\nLink chunks of code automatically\n\noutput is input\nusing arguments to functions\n\nDefine once so changes are made once\n\nDRY (Don’t Repeat Yourself)"
  },
  {
    "objectID": "rProgramming.html#readability",
    "href": "rProgramming.html#readability",
    "title": "Contemporary R programming",
    "section": "Readability",
    "text": "Readability\nConsistent naming of variables and functions\n\nnouns for variable names\nverbs for functions\nfixed composition ordereg., lm_dta_sub - glm_dtb_ext\ncombine what belongs togethereg., 1st, 2nd and 3rd element\n\nShort and meaningful naming\nFunctions instead of code\nIsolate the core of the program\n\nmtcars[mtcars$mpg &gt; 21 & mtcars$hp &lt; 60, c(1,4,6)]\nmtcars[mtcars$mpg &gt; 21 & mtcars$hp &lt; 60, c('mpg','hp','wt')]\n\n\nmtcars %&gt;% filter(mpg&gt;21,hp&lt;60) %&gt;% select(mpg,hp,wt)\n\n             mpg hp    wt\nHonda Civic 30.4 52 1.615\n\n\n\nmtcars %&gt;% \n  filter(mpg&gt;21,hp&lt;60) %&gt;% \n  select(mpg,hp,wt)"
  },
  {
    "objectID": "rProgramming.html#r-programming-specifics",
    "href": "rProgramming.html#r-programming-specifics",
    "title": "Contemporary R programming",
    "section": "R Programming Specifics",
    "text": "R Programming Specifics\nR as a tool\n\ndedicated to statistics: but much more\nopen source (almost fully)\n\nhighly modular\nuses vectorisation\n\nWickham, H. (2019). Advanced R, Second Edition. CRC Press.\nR as a language\n\nfunctional / kinda object oriented\nuse of lexical scoping\ndynamically-typed\nspecific choices for memory use\n\ncopy on modify\nmodify in place when unique reference\nmodify in place for environments\nlists store references, not values\n\nbuild on C / Fortran\n\ncan be fast !! but often is not"
  },
  {
    "objectID": "rProgramming.html#speed",
    "href": "rProgramming.html#speed",
    "title": "Contemporary R programming",
    "section": "Speed",
    "text": "Speed\nIt matters how you do things\n\nMake use of vectorisation.c(1:5)^2 → 1, 4, 9, 16, 25really!! make use of it\nAvoid creating objects in loops (immutable objects).\n\n\nnr_iter &lt;- 100000\n# vectorisation\nsystem.time(out &lt;- (1:nr_iter)^2)\n\n   user  system elapsed \n      0       0       0 \n\n\n\n# pre-allocating memory\nout2 &lt;- as.numeric(NA,length=100000)\nsystem.time(for(it in 1:nr_iter) out2[it] &lt;- it^2)\n\n   user  system elapsed \n   0.07    0.00    0.08 \n\n# growing output\nout3 &lt;- numeric()\nsystem.time(for(it in 1:nr_iter) out3 &lt;- c(out3,it^2))\n\n   user  system elapsed \n  18.39    2.92   29.41 \n\n# using tidyverse\nsystem.time(out4 &lt;- map_dbl(1:nr_iter,~.x^2))\n\n   user  system elapsed \n   0.16    0.03    0.49"
  },
  {
    "objectID": "rProgramming.html#r-objects",
    "href": "rProgramming.html#r-objects",
    "title": "Contemporary R programming",
    "section": "R Objects",
    "text": "R Objects\nR workspaces contain R objects\n\ndata structures\nfunctions are objects too\nnew object types can be created\n\nObjects differ in how they are used\n\ninspect objects\nextract information from objects\n\nR for you - typically use of data frames\n- data-frames are lists&lt;br/&gt;heterogeneous\n- matrices are more efficient&lt;br/&gt;homogeneous\n\nand vectors\n\n(mostly) double for numeric\nfactor for categoricalfixed length categories (numerical)\n\n\nQuick perspective on objects"
  },
  {
    "objectID": "rProgramming.html#r-functions",
    "href": "rProgramming.html#r-functions",
    "title": "Contemporary R programming",
    "section": "R Functions",
    "text": "R Functions\nR workspaces contain R functions\n\ncheck withlsf.str()lsf.str(\"package::dplyr\")\nlook at the function, eg. lm\nlook for information, eg. ?lm\n\nGo to the help file\n\nconditional on arguments (input)\ngive a return value (output)\nwith examples\n\nMost functions in packages\n\nload into workspacelibrary or require\npreferably use heavily used packages\nmaybe prioritise tidyverse"
  }
]